#!/bin/bash

### TEST ARRAYS SECTION

# This first section of several arrays are designed to be
# applied to the gensfw_srm command to test various actions.

declare -a TEST_AFTER_SIBLING=(
    after_sibling "test_branch/branch/item:1" "result : 2"
)

declare -a TEST_BEFORE_SIBLING=(
    before_sibling "edit/schema/field:id/readOnly:true" "before:readOnly"
)

declare -a TEST_BREAK_IF=(
    break_if "edit/schema/field:id/readOnly:true"
)

declare -a TEST_COPY_BEFORE_SIBLING=(
    copy_before_sibling "edit/schema" "household/person[name:Charles]" -- 
)

declare -a TEST_DUMP_PATH=(
    flag dump_path --
    message
    "<%CLRSCR>"
    "(TEST_DUMP_PATH)"
    "Dumping an evaluation of an SRMPath string."
    "household/person[interests[writing]][gender:female]"
    --
    
    dump_path "household/person[interests[writing]][gender:female]" --
    message " " "household/person[interests[writing][gender:female]]" --
    dump_path "household/person[interests[writing][gender:female]]" --
    pause --
)

declare -a TEST_LAST_CHILD=(
    last_child "list/result" "last_child:following schema"
)

declare -a TEST_DELETE=(
    delete "test_branch/branch[item:1/name:B1-I1][item:2/name:B1-I2]"
)

declare -a TEST_APPEND_MODE=(
    append_mode "last_mode" --
)

declare -a TEST_LIST_MATCHES=(
    # list_matches "household/person" --
    list_matches "*[result]" --
)

# The following tests are not necessary because they are
# used in several of the other tests.  
# Empty arrays to defuse warning, but to skip the tests
declare -a TEST_DISPLAY=()
declare -a TEST_PAUSE=()
declare -a TEST_LABEL=()
declare -a TEST_MESSAGE=()
declare -a TEST_WRITE_FILE=()
declare -a TEST_GOTO=()

# The following are redefinitions of the test cases set above.
# Comment-out tests that should still be run, leave the redefinitions
# for tests that should be skipped.
# TEST_AFTER_SIBLING=()
# TEST_BEFORE_SIBLING=()
# TEST_BREAK_IF=()
# TEST_DUMP_PATH=()
# TEST_LAST_CHILD=()
# TEST_DELETE=()
# TEST_APPEND_MODE=()

# Action test for GOTO requires many steps to confirm proper
# operation.  It is pulled from the regular action tests and
# done its own way.
declare -a TEST_GOTO_SET=(

    # Add progress-tracking mode for "goto" action testing
    after-sibling "test_branch" "goto_test" --
    last-child "goto_test" "progress"       --

    # Jump to start of execution
    pause "About to jump to the start of the TEST_GOTO_SET test." --
    goto begin                          --

    # Each label will only be executed once
    label first                                     --
       goto second "goto_test/progress/did_first"   --
       last-child "goto_test/progress" "did_first"  --
       message "Just done with first"               --
       goto begin                                   --

    label second                                    --
       goto third "goto_test/progress/did_second"   --
       last-child "goto_test/progress" "did_second" --
       message "Just done with second"              --
       goto begin                                   --

    label third                                     --
       goto complete "goto_test/progress/did_third" --
       last-child "goto_test/progress" "did_third"  --
       message "Just done with third"               --
       goto begin                                   --

    label begin --
       # Jump out if completed all steps:
       goto complete "goto_test/progress[did_first][did_second][did_third]" --
       # Otherwise, show message
       message "BEGINNING" --
       pause
       " "
       "Jumping first to the second label, and when returned"
       "from that, start at the top.  The execution order should"
       "be second, first, third."
       --

       goto first "goto_test/progress/did_second" --
       goto second --

    label complete --
    display goto_test --
    pause "All the steps should have been completed to get here." --

    pause "Completed the GOTO test."
)


declare -a SHORT_TEST_GOTO_SET=(
    message "<%CLRSCR>" "(SHORT_TEST_GOTO_SET)" --

    # Add progress-tracking mode for "goto" action testing
    after-sibling "test_branch" "goto_test"                         --
    last-child "goto_test" "progress"                               --

    message "You should jump ahead to see the last message." --

    goto last "goto_test/progress" --

    message "You shouldn't see this message" --

    label last --

    pause "This should be the only message you see." --
)

# Other, non action tests:
declare -a TEST_PATH_EVALUATION=(
    message
    "<%CLRSCR>"
    "(TEST_PATH_EVALUATION)"
    "Testing more complicate SRMPath expressions.  The path expression"
    "is needlessly complicated to test/demonstrate nested predicates."
    --

    display "<%SKIP_COMMENTS>" "household" --

    message "execute:"
    "   after_sibling \"household/person[interests[writing]][gender:female]/gender\" \"household_head : true\""
    --

    after_sibling "household/person[interests[writing]][gender:female]/gender" "household_head : true" --

    message "execute:"
    "   after_sibling \"household/person[interests[running]][gender:female]/gender\" \"household_head : true\""
    --
    after_sibling "household/person[interests[running]][gender:female]/gender" "household_head : true" --

    pause " " --

    message
    " "
    "This was a trick action: there is no person who is both"
    "female and is interested in running.  Only one record was"
    "changed to include the 'household_head' instruction."
    " "
    --

    display "household/person[household_head]" --
)

declare -a TEST_BLANK_LINES=(
    message
    "<%CLRSCR>"
    "Test appropriate line inclusions with adjacent modes with no interveing blank lines."
    display test_no_trailing_blank --
    after_sibling "test_no_trailing_blank/result" "result : 2" --
    message "See what happened after adding result:2 after result:" --
    display test_no_trailing_blank --
    pause
    )

### end of TEST ARRAYS SECTION

# Test for existence and type (array) of $1
name_is_array()
{
    local obj_name="$1"
    local declr=$( declare -p "$obj_name" 2>/dev/null )
    # obj_name must be both found AND declared with declare -a:
    if [ $? -eq 0 ]; then
        if [ "${declr:0:10}" == "declare -a" ]; then
            return 0
        fi
    fi
    return 1
}

# Test for existence and type (function) of $1
name_is_function()
{
    local fname="%2"
    local type=$( LC_ALL=C type -t "$fname" )
    [ "$type" == "function" ]
}

# Used by show_action_test() to parse a path string
get_mode_from_path()
{
    local path="$1"
    local IFS="/"
    local arr=( $( echo "$1" ) )
    echo "${arr[0]}"
    return 0
}

# Seeks an action test array and, if found and not empty,
# prepares the array for use as a demonstration of its
# signature action.
show_action_test()
{
    local name="$1"
    local -a newarr
    array_name="TEST_${name^^}"
    if name_is_array "$array_name"; then
        array_reference="${array_name}[@]"
        local_array=( "${!array_reference}" )
        if [ "${#local_array[@]}" -eq 0 ]; then
            return 0
        elif [ "${local_array[0]}" == "flag" ]; then
            newarr=( "${local_array[@]:3}" )
        else
            local action="${local_array[0]}"
            local path="${local_array[1]}"
            local mode=$( get_mode_from_path "$path" )

            newarr=(
                message
                "<%CLRSCR>"
                "(${array_name})"
                "Testing the output of the '$action' action."
                "Before the change is:"
                --

                display "<%SKIP_COMMENTS>" "$mode" --

                message
                " "
                "The output after applying the following commands:"
                "'${local_array[*]}',"
                --

                "${local_array[@]}" --

                display "<%SKIP_COMMENTS>" "$mode" --

                pause --
            )

        fi

        ./gensfw_srm gensfw_srm_test.srm "${newarr[@]}"
    fi
}

# Checks list of action words against test arrays demonstrations.
# The names are collected of actions without test arrays and
# an message is given to alert the user to their lack.
announce_missing_action_tests()
{
    local -a ACTIONS=( $( ./gensfw_srm --show_actions ) )
    local -a missing=()
    local action array_name
    local -i longest=0

    for action in "${ACTIONS[@]}"; do
        array_name="TEST_${action^^}"
        if ! name_is_array "$array_name"; then
            missing+=( "$action" )
            if [ "${#action}" -gt "$longest" ]; then
                longest="${#action}"
            fi
        fi
    done

    if [ "${#missing[@]}" -gt 0 ]; then
        echo "The following actions are missing test arrays."
        for act in "${missing[@]}"; do
            printf "'%-${longest}s (%s)'\n" "${act}" "TEST_${act^^}"
        done
        echo

        local bogus
        read -p "Continue with other test, y or n? " -i "n" bogus
        if [ "$bogus" == "n" ]; then
            exit 1
        fi
    fi

}

# Get list of action words from the gensfw_srm command and
# runs a test of the action using a test array that should
# be defined for the action.
test_actions()
{
    if [ $# > 0 ]; then
        show_action_test "$1"
    else
        announce_missing_action_tests

        local -a ACTIONS=( $( ./gensfw_srm --show_actions ) )
        local action

        for action in "${ACTIONS[@]}"; do
            show_action_test "$action"
        done
    fi
}

test_goto_set()
{
    ./gensfw_srm gensfw_srm_test.srm "${TEST_GOTO_SET[@]}"
}


test_complicated_path()
{
    ./gensfw_srm gensfw_srm_test.srm "${TEST_PATH_EVALUATION[@]}"
}


declare -a CARR_MAKE_FILE=(
    append-mode
       "root"
       --

    last-child
       "root"
       "child : first"
       "child : second"
       "child : third"
       --

    last-child
       "root/child:first"
       "name : Anne"
       "age : 12"
       "possessions"
       --

    last-child "root/child:second"
       "name : Benjamin"
       "age : 15"
       "possessions"
       --

    last-child "root/child:third"
       "name : Cassandra"
       "age : 16"
       "possessions"
       --
)

declare -a CARR_ADD_ITEM=(
    last-child "root"
       "item : abstract"
       --

    last-child "root/item"
       "weight : none"
       "color : none"
       --
)

bestow_gift()
{
    local recipient="$1"
    local gift="${2=-ball}"
    local color="${3=-red}"
    local weight="${4=-200gm}"

    local person_path="root/child[name:${recipient}]"
    local item_path="root/item"
    local gift_path="$person_path/possessions/gift:$gift"

    local -a ARR=(
       goto
          Has_Possessions
          "${person_path}/possessions"
          --

       last-child
          "${person_path}"
          "possessions"
          --

       label
          Has_Possessions
          --

       goto
          Has_Gift
          "${person_path}/possessions/gift:${gift}" --

       copy-as-last-child
          "${person_path}/possessions"
          "$item_path"
          "<%SET_TAG>"
          "gift"
          "<%SET_VALUE>"
          "$gift"
          --

       set-line
          "$gift_path/weight"
          "<%SET_VALUE>"
          "$weight"
          --

       set-line
          "$gift_path/color"
          "<%SET_VALUE>"
          "$color"
          --

       label
          Has_Gift
          --
    )

    local IFS=$'\n'
    echo "${ARR[*]}"
}

add_before_test()
{
    local -a make_file=(
        "${CARR_MAKE_FILE[@]}" 
        "${CARR_ADD_ITEM[@]}"
    )

    local -a args=(
        message
           "Conducting a test of before-sibling and copy-before-sibling"
           --

        "${make_file[@]}"

        display
           --

        message
           "^_starting"
           " "
           --

        before-sibling
           "root"
           "newnode : BEFORE-SIBLING for root"
           --

        before-sibling
           "root/child[name:Benjamin]"
           "newnode : BEFORE-SIBLING for Benjamin"
           --

        display
           --

        message
           "^_After using before-sibling to add lines."
           " "
           --

        copy-before-sibling
           "root/child[name:Benjamin]"
           "root/child[name:Benjamin]"
           "<%SET_VALUE>"
           "twin"
           --

        set_line
           "root/child:twin/name"
           "<%SET_VALUE>"
           "Bartholomew"
           --

        display --

        message
           "^ After copy-before-sibling to create a twin,"
           "  changing the child value to \"twin\", then"
           "  changing the name using the path root/child:twin"
           --
        )

    # pdb \
    ./gensfw_srm "<%NEWFILE>" "${args[@]}"
}

add_last_child_test()
{
    local -a make_file=(
        "${CARR_MAKE_FILE[@]}" 
        "${CARR_ADD_ITEM[@]}"
    )

    local -a cass_box=( $( bestow_gift "Cassandra" "box" "blue" "1kg" ) )

    local -a args=(
        message
           "Conducting a test of last-child and copy-as_last-child"
           --

        "${make_file[@]}"
        "${cass_box[@]}"

        display
           --

        message
           "^_starting, notice only Cassandra has a possession."
           " "
           --

        last-child
           "root"
           "newnode : LAST-CHILD for root"
           --

        last-child
           "root/child[name:Benjamin]"
           "newnode : LAST-CHILD attribute for Benjamin"
           --

        display
           --

        message
           "^_After using last-child to add lines."
           " "
           --

        copy-as-last-child
           "root/child[name:Benjamin]/possessions"
           "root/child[name:Cassandra]/possessions/gift"
           "<%SET_TAG>"
           "BRIBE"
           --

        display --

        message
           "^ After copy-as-last-child, giving Benjamin what"
           "  Cassandra has to make him stop complaining."
           --
        )

    # pdb \
    ./gensfw_srm "<%NEWFILE>" "${args[@]}"
}

add_after_test()
{
    local -a make_file=(
        "${CARR_MAKE_FILE[@]}" 
        "${CARR_ADD_ITEM[@]}"
    )

    local -a anne_ball=( $( bestow_gift "Anne" "ball" "red" "500gm" ) )
    local -a cass_box=( $( bestow_gift "Cassandra" "box" "blue" "1kg" ) )
    local -a ben_coal=( $( bestow_gift "Benjamin" "coal" "black" "2kg" ) )

    local -a args=(
        message
           "Conducting a test of after-sibling and copy-after-sibling"
           --

        "${make_file[@]}"

        display
           --

        message
           "^_starting"
           " "
           --

        "${anne_ball[@]}"
        "${cass_box[@]}"
        "${ben_coal[@]}"

        display 
           --

        message
           "^_after_giving_gifts"
           " "
           --

        after-sibling
           "root"
           "newnode: AFTER SIBLING for root"
           --

        after-sibling
           "root/child[name:Cassandra]"
           "newmode : AFTER_SIBLING to make new child of root."
           --

        after-sibling
           "root/child[name:Cassandra]/possessions"
           "newmode : AFTER_SIBLING to make new attribute Cassandra.."
           --

        display --

        message
           "^_after after-sibling actions."
           _ _
           --
    )

    # pdb \
    ./gensfw_srm "<%NEWFILE>" "${args[@]}"
}

test_wildcard_path()
{
    local -a cmd=(
        "${CARR_MAKE_FILE[@]}" 
        "${CARR_ADD_ITEM[@]}"

        goto found "root/*/name:Benjamin" --

        message "Didn't find Benjamin" --
        goto end --

        label found --
        message "Found Benjamin" --

        label end
    )

    # pdb3 \
    ./gensfw_srm "<%NEWFILE>" "${cmd[@]}"

}

test_negative_predicate()
{
    local -a cmd=(
        goto found_charles "household/person[name:Charles]" --

        message "Failed to find Charles" --

        goto test2 --

        label found_charles --
        message "Found Charles:" --
        display "<%SINGLE_LINE>" "household/person[name:Charles]/name" --

        label test2 --

        goto found_not_charles "household/person[!name:Charles]" --

        message "Failed to find not Charles" --
        goto end --

        label found_not_charles --

        message "Found first not Charles, whose name attribute is:" --
        display
           "<%SINGLE_LINE>"
           "household/person[!name:Charles]/name"
           --

        message " " --

        last-child "household/person[!name:Charles]" "BOGUS:bogus" --
        display
           "household/person[!name:Charles]"
           --
        message "^ updated non-Charles person with added new line." --


        label end --
    )

    ./gensfw_srm gensfw_srm_test.srm "${cmd[@]}"
}

test_loop_until()
{
    local -a cmd=(
        label start --

        display "<%SINGLE_LINE>" "*/result[!tagged]" --

        last-child "*/result[!tagged]" "tagged : true" --

        goto start "*/result[!tagged]" --

        pause
           " "
           "Tags applied. The result follows:"
           --

        # display --
    )

    # pdb3 \
    ./gensfw_srm gensfw_srm_test.srm "${cmd[@]}"
}


test_message_tokens()
{
    local -a cmd=(
        message "<%show:edit|edit/type|household/person[name:Charles]/name>" --
        )

    ./gensfw_srm gensfw_srm_test.srm "${cmd[@]}"
}

test_pause_and_message_actions()
{
    local -a bigshow_array=(
        "*/person[name:Charles]/dob"
        "*/person[name:Charles]/dob^v"
        "*/person[name:Charles]/dob^t"
        )

    local OIFS="$IFS"
    IFS='|'
    local bigshow="${bigshow_array[*]}"
    IFS="$OIFS"

    local -a cmd=(
        message "This is a default-colored message." --
        hilite_message "This is a highlighted message." --
        
        hilite_message
           "This is a highlighed message,"
           "<%color:red>"
           "where the color changes from"
           "<%color:green>"
           "to line, but returning to default upon exit."
           --

        message
           "This message includes a line using <%show:path>"
           "<%color:green>"
           "<%show:*/person[name:Charles]/dob>"
           "<%color:reset>"
           "This follow up is a multiple show <%show:path1|path2|path3>"
           "${bigshow}"
           "<%color:green>"
           "<%show:${bigshow}>"
           "<%color:reset>"
           "Substitute with a ^ delimiter:"
           "<%color:green>"
           "<%show:^|${bigshow}>"
           "<%color:reset>"
           "Substitute with a newline delimiter.  You must insert an actual ENTER press:"
           "<%color:green>"
           "<%show:
|${bigshow}>"
           "<%color:reset>"
           " "
           --

        pause "This is a default-colored pause." --
        hilite_pause "This is a highlighted pause." --

        hilite_pause
           "This is a highlighted pause,"
           "<%color:red>"
           "where the color changes from"
           "<%color:green>"
           "to line, but returning to default upon exit."
           --
    )

    ./gensfw_srm gensfw_srm_test.srm "${cmd[@]}"
}



# add_before_test
# add_last_child_test
# add_after_test

# test_wildcard_path
# test_negative_predicate
# test_loop_until

# test_actions  # could have included single test parameter
test_message_tokens
test_pause_and_message_actions

# test_goto_set
# test_complicated_path
