#!/bin/bash

write_scripts()
{
    local name IFS
    local -a IACT_ROW
    IFS="${YSEP}"

    for name in "${IACT_NAMES[@]}"; do
        IACT_ROW=( $( echo "${IACT_DATA[$name]}" ) )
        if [ "${IACT_ROW[0]}" = 'TRUE' ]; then
            "gsf_script_${name}_sql" "${name}"
        fi
    done
}

gsf_write_script_sql()
{
    gsf_script_intro_sql

    echo "BEGIN"
    gsf_sql_proc_body_${IACT_NAME}
    echo "END  \$\$"
}

# gsf_add_params_sql()
# Adds an indented list of stored procedure parameters
# for field prefs that have the Param flag set.
gsf_add_params_sql()
{
    local indent_chars="$1"
    local IFS
    local -t row
    local -i commas=0
    local rowstr
    for rowstr in "${IACT_COL_PREFS[@]}"; do
        IFS="${YSEP}"
        row=( $( echo "${rowstr}" ) )
        if [ "${row[2]}" = "TRUE" ]; then
            if [ $(( commas++ )) -gt 0 ]; then
                echo ","
                echo -n "${indent_chars}"
            fi
            echo -n "${row[0]} ${row[1]}" 
        fi
    done
}

# gsf_add_selects_sql()
# Adds field names to a select statement for fields prefs
# that have the Result flag set.
gsf_add_selects_sql()
{
    local indent_chars="$1"
    local prefix=""

    if [ $# -gt 1 ]; then
        prefix="$2."
    fi

    local IFS
    local -t row
    local -i commas=0
    local rowstr
    for rowstr in "${IACT_COL_PREFS[@]}"; do
        IFS="${YSEP}"
        row=( $( echo "${rowstr}" ) )
        if [ "${row[3]}" = "TRUE" ]; then
            if [ $(( commas++ )) -gt 0 ]; then
                echo ","
                echo -n "${indent_chars}"
            fi
            echo -n "${prefix}${row[0]}" 
        fi
    done
}

gsf_callback_prefs_rows()
{
    local callback="$1"
    local IFS="${YSEP}"
    local -t CALLBACK_ROW
    local rowstr
    for rowstr in "${IACT_COL_PREFS[@]}"; do
        CALLBACK_ROW=( $( echo "${rowstr}" ) )
        if [ "${#CALLBACK_ROW[@]}" -gt 2 ]; then
            $callback
        fi
    done
}

gsf_script_intro_sql()
{
    echo "DROP PROCEDURE IF EXISTS ${IACT_NAME} \$\$"
    local str_create_proc="CREATE PROCEDURE ${IACT_NAME}("

    echo -n "${str_create_proc}"

    # parameter expansion to replace all characters with a space for
    # aligning all the parameters with the open paren:
    gsf_add_params_sql "${str_create_proc//?/ }"
    echo ")"
}

declare gsf_script_indent="  "

declare GSF_SELECT_LINE="${gsf_script_indent}SELECT "
declare   GSF_FROM_LINE="${gsf_script_indent}  FROM "
declare    GSF_SET_LINE="${gsf_script_indent}   SET "
declare  GSF_WHERE_LINE="${gsf_script_indent} WHERE "
declare    GSF_AND_LINE="${gsf_script_indent}   AND "


declare GSF_UPDATE_FIELDS_LINE="${gsf_script_indent}       ("
declare GSF_UPDATE_VALUES_LINE="${gsf_script_indent}VALUES ("

declare GSF_SELECT_SPACES="${GSF_SELECT_LINE//?/ }"
declare GSF_UPDATE_SPACES_LINE="${GSF_UPDATE_VALUES_LINE//?/ }"

gsf_sql_proc_body_List()
{
    local prefix="t"
    local -i where_count=0

    lambda()
    {
        if [ "${CALLBACK_ROW[2]}" = "TRUE" ]; then
            # Line-up where parts under the first part:
            if [ $(( where_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            local fname="${CALLBACK_ROW[0]}"
            if table_field_is_index "${fname}"; then
                echo -n "(${fname} IS NULL OR ${prefix}.${fname}=${fname})"
            else
                echo -n "${prefix}.${fname}=${fname}"
            fi
        fi
    }

    # Build the query/procedure body:
    echo -n "${GSF_SELECT_LINE}"
    gsf_add_selects_sql "${GSF_SELECT_SPACES}" "${prefix}"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    gsf_callback_prefs_rows "lambda"
    echo ";"
}

gsf_sql_proc_body_Add()
{
    local -i lambda_count=0
    local select_line="${gsf_script_indent}       ("
    local values_line="${gsf_script_indent}VALUES ("
    local line_indent="${values_line//?/ }"

    lambda_values()
    {
        if [ "${CALLBACK_ROW[2]}" = "TRUE" ]; then
            local fname="${CALLBACK_ROW[0]}"
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ", "
                echo -n "${GSF_UPDATE_SPACES_LINE}"
            fi
            echo -n "${fname}"
        fi
    }

    echo "${gsf_script_indent}INSERT INTO ${GF_TNAME}"
    lambda_count=0
    echo -n "${GSF_UPDATE_FIELDS_LINE}"
    gsf_callback_prefs_rows "lambda_values"
    echo ")"
    lambda_count=0
    echo -n "${GSF_UPDATE_VALUES_LINE}"
    gsf_callback_prefs_rows "lambda_values"
    echo ");"
}

gsf_sql_proc_body_Read()
{
    local prefix="t"
    local -i where_count=0

    lambda()
    {
        if [ "${CALLBACK_ROW[2]}" = "TRUE" ]; then
            # Line-up where parts under the first part:
            if [ $(( where_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            local fname="${CALLBACK_ROW[0]}"
            echo -n "${prefix}.${fname}=${fname}"
        fi
    }

    # Build the query/procedure body:
    echo -n "${GSF_SELECT_LINE}"
    gsf_add_selects_sql "${GSF_SELECT_SPACES}" "${prefix}"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    gsf_callback_prefs_rows "lambda"
    echo ";"
}

gsf_sql_proc_body_Update()
{
    local prefix="t"
    local -i lambda_count=0

    cb_is_param() { [ "${CALLBACK_ROW[2]}" = "TRUE" ]; return $?; }
    cb_is_index() { table_field_is_index "${CALLBACK_ROW[0]}"; return $?; }

    lambda_set()
    {
        if ! cb_is_index -a cb_is_param; then
            local fname="${CALLBACK_ROW[0]}"
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo -n "${GSF_SELECT_SPACES}"
            fi
            echo -n "${prefix}.${fname} = ${fname}"
        fi
    }

    lambda_where()
    {
        if cb_is_index -a cb_is_param; then
            local fname="${CALLBACK_ROW[0]}"
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi
            echo -n "${prefix}.${fname} = ${fname}"
        fi
    }

    echo "${gsf_script_indent}UPDATE ${GF_TNAME}"
    echo -n "${GSF_SET_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "lambda_set"
    echo
    echo -n "${GSF_WHERE_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "lambda_where"
    echo ";"
}

gsf_sql_proc_body_Delete()
{
    local prefix="t"
    local -i lambda_count=0

}

gsf_sql_proc_body_Import()
{
    local prefix="t"
    local -i lambda_count=0

}
