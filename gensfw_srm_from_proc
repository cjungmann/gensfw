#!/usr/bin/env python3
"""Tool for creating an SRM file for a named procedure."""

import sys
import subprocess

def show_usage():
    """Notify user of proper syntax for calling this command."""
    print("gensfw_srm_from_proc <database name> <procedure name> [mode name]")

def run_mysql_query(query_list, dbname="information_schema"):
    """Returns a list of result lines from the query."""
    parray = [
        "mysql",
        dbname,
        "-BN",
        "-e",
        " ".join(query_list)
    ]

    try:
        proc = subprocess.Popen(parray,
                                universal_newlines=True,
                                stderr=subprocess.PIPE,
                                stdout=subprocess.PIPE)

        output, error = proc.communicate()
        if len(error) > 0:
            print(error)

        rlist = output.split('\n')
        # Filter out blank lines (usually an empty line at the end):
        return [x for x in rlist if len(x) > 0]

    except subprocess.SubprocessError as error:
        print("Error processing query, '%s'" % error, file=sys.stderr)

    return []

def confirm_database(dbase_name):
    """Checks if named database is hosted on MySQL server."""

    query = [
        "SELECT COUNT(*)",
        "FROM information_schema.SCHEMATA",
        "WHERE SCHEMA_NAME='%s'" % dbase_name
    ]

    rlist = run_mysql_query(query)
    return len(rlist) > 0 and rlist[0] == "1"

def confirm_procedure(dbase_name, proc_name):
    """Checks if named database is hosted on MySQL server."""

    query = [
        "SELECT COUNT(*)",
        "FROM information_schema.ROUTINES",
        "WHERE ROUTINE_SCHEMA='%s'" % dbase_name,
        "AND ROUTINE_NAME='%s'" % proc_name
    ]

    rlist = run_mysql_query(query)
    return len(rlist) > 0 and rlist[0] == "1"

def print_list_of_procedures(dbase_name):
    """Returns a list of procedure names in the named database."""

    query = [
        "SELECT ROUTINE_NAME",
        "FROM information_schema.ROUTINES",
        "WHERE ROUTINE_SCHEMA='%s'" % dbase_name
        ]

    rlist = run_mysql_query(query)
    for pname in rlist:
        print(pname)

def get_procedure_comment(dbname, procname):
    """Returns the contents of the procedures comment attribute."""
    
    query = [
        "SELECT ROUTINE_COMMENT",
        "  FROM ROUTINES",
        " WHERE ROUTINE_SCHEMA='%s'" % dbname,
        "   AND ROUTINE_NAME='%s'" % procname
        ]

    return run_mysql_query(query)

def get_procedure_params(dbname, procname):
    """Checks the COLUMNS table to get procedure parameters info."""

    columns = [
        "PARAMETER_NAME",
        "DATA_TYPE",
        "CHARACTER_MAXIMUM_LENGTH",
        "NUMERIC_PRECISION",
        "NUMERIC_SCALE",
        "DTD_IDENTIFIER"
        ]

    query = [
        "SELECT",
        ", ".join(columns),
        "FROM PARAMETERS",
        "WHERE SPECIFIC_SCHEMA='%s'" % dbname,
        "   AND SPECIFIC_NAME='%s'" % procname
        ]

    return run_mysql_query(query)

def process_procedure(dbname, procname, modename, view_only=False):
    """Print the SRM output for the given database and procedure."""

    params = get_procedure_params(dbname, procname)
    comment = get_procedure_comment(dbname, procname)
    submit_name = None
    submit_mode_type = None

    if len(params) > 0:

        if view_only:
            submit_name = "view"
            submit_mode_type = "form-view"
        else:
            submit_name = "submit"
            submit_mode_type = "form-submit"
            print(modename)
            print("   type : form-new")
            print("   schema-proc : %s" % procname)
            print("   form-action : ?%s_submit" % modename)
            if len(comment) > 0:
                print("   autoload_tag : %s" % comment[0] )
            print("   schema")
            for param in params:
                rowspecs = param.split('\t')
                print("      field : %s" % rowspecs[0])
            print()

        print("%s_%s" % (modename, submit_name))
        print("   type : %s" % submit_mode_type)
        print("   procedure : %s" % procname)
        if view_only:
            if len(comment) > 0:
                print("   autoload_tag : %s" % comment[0] )
            print("   schema")
        else:
            print("   result")
            print("      type : update")

        print()

def main():
    """Main program function."""
    if len(sys.argv) == 0:
        show_usage()

    dbname = None
    procname = None
    modename = "mode"
    view_only = False

    if len(sys.argv) > 1:
        dbname = sys.argv[1]
        if not confirm_database(dbname):
            print("The MySQL server does not recognize database '%s'" %
                  dbname,
                  file=sys.stderr)
            return 1

    if len(sys.argv) > 2:
        procname = sys.argv[2]

    if len(sys.argv) > 3:
        modename = sys.argv[3]

    if len(sys.argv) > 4 and sys.argv[4] == "view":
        view_only = True

    if procname:
        if confirm_procedure(dbname, procname):
            process_procedure(dbname, procname, modename, view_only)
            return 0
        else:
            print("The procedure, '%s', is not found in database '%s'."
                  % (procname, dbname),
                  file=sys.stderr)

    print_list_of_procedures(dbname)
    return 1

if __name__ == "__main__":
    main()
