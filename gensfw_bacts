#!/bin/bash

get_saved_settings_string()
{
    local IFS
    local iname
    for iname in "${IACT_NAMES[@]}"; do
        echo -n "${iname}${FSEP}${IACT_DATA[$iname]}${RSEP}"
    done
}

save_settings_to_file()
{
    local fpath="$1"

    local IFS="${RSEP}"

    local meta_rec="${GF_DBNAME}${FSEP}${GF_TNAME}"
    local -a settings
    local settings_str=$( get_saved_settings_string )

    settings=( $( get_saved_settings_string ) )

    IFS="${FSEP}"
    local -a filearr
    filearr=(
        "${meta_rec}"
        "${GSF_FIELD_NAMES[*]}${FSEP}"
        "${GSF_FIELD_LABELS[*]}${FSEP}"
        "${GSF_FIELD_SLINKS[*]}${FSEP}"
        "${GSF_SRM_GLOBALS[*]}${FSEP}"
        "${settings_str}"
        # "${settings[@]}"
    )

    IFS="${RSEP}"
    echo -n "${filearr[*]}" > $fpath
}


# Copies labels from file to the default labels array (GSF_FIELD_LABELS)
gsf_reconcile_field_strings()
{
    local IFS="${FSEP}"
    local -a lnames=( $( echo "$1" ) )
    local -a labels=( $( echo "$2" ) )
    local -a slinks=( $( echo "$3" ) )

    local -i exval endx ndx=0
    
    local name label slink
    for name in "${GSF_FIELD_NAMES[@]}"; do
        endx=$( index_in_array "$name" "${lnames[@]}" )
        exval=$?
        if [ $exval -eq 0 ]; then
            label="${labels[$endx]}"
            if [ -n "${label}" ]; then
                GSF_FIELD_LABELS[$ndx]="$label"
            fi
            slink="${slinks[$endx]}"
            if [ -n "${slink}" ]; then
                GSF_FIELD_SLINKS[$ndx]="$slink"
            fi
        fi
        (( ndx++ ))
    done
}

gsf_load_IACT_DATA()
{
    prepare_default_IACT_DATA

    local IFS="${FSEP}"
    local recstr name

    gsf_reconcile_field_strings "${GSF_RECS[@]:1:3}"

    local -a rec valarr
    for recstr in "${GSF_RECS[@]:3}"; do
        rec=( $( echo "${recstr}" ) )
        name="${rec[0]}"
        if confirm_iact_name "${name}"; then
            # Use sliced array to reconstruct values using asterisk expansion
            valarr=( "${rec[@]:1}" )
            IACT_DATA["${name}"]="${valarr[*]}"
        fi
    done

    show_table_preferences_dialog
}

gsf_open_table_from_record()
{
    local IFS="${FSEP}"
    local -i exval

    # Split the first record into the database and table names:
    local -a names
    names=( $( echo "$1" ) )

    if [ $? -eq 0 -a "${#names[@]}" -eq 2 ]; then
        set_dbase_name "${names[0]}"
        exval=$?
        if [ $exval -eq 0 ]; then
            set_table_name "${names[1]}"
            exval=$?
            if [ $exval -eq 0 ]; then
                collect_table_info "gsf_load_IACT_DATA"
            fi
        fi
    fi
    return $exval
}

# Read the contents of the filename into array-of-records GSF_RECS.
# The first record is directly passed to gsf_open_table_from_record, but
# the subsequent records are accessed, via callback gsf_load_IACT_DATA,
# from the GSF_RECS array that remains in the environment.
gsf_read_settings_from_file()
{
    # existence of file already confirmed
    local fname="$1"
    local IFS="${RSEP}"
    local -i exval
    local -a GSF_RECS=( $( cat "$fname" ) )

    IFS="${FSEP}"
    GSF_SRM_GLOBALS=( $( echo "${GSF_RECS[4]}" ) )

    gsf_open_table_from_record "${GSF_RECS[0]}"
}

open_gsf_file()
{
    local result
    local -i exval
    local -a cmd

    cmd=(
        "${YAD_COMMON_ARGS[@]}"
        --text "Select a settings file to load."
        --file
        --filename "\*.gsf"
    )

    result=$( yad "${cmd[@]}" )
    exval=$?

    if [ $exval -eq 0 -a -f "${result}" ]; then
        gsf_read_settings_from_file "${result}"
    fi
}

