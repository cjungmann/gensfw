\input texinfo
@setfilename gensfw.info
@settitle Using gensfw

@dircategory Schema Framework Documents
@direntry
* Script Generator: (gensfw.info).    Documentation for @command{gensfw}, a utility for generating SQL and SRM scripts for the Schema Framework.
@end direntry

@copying
Documentation for the use of @command{gensfw} Script Generator.

Copyright @copyright{} 2018 Charles P Jungmann
@end copying

@titlepage
@title Using @command{gensfw} Script Generator
@author Charles P. Jungmann
@page
@insertcopying
@end titlepage

@ifnottex
@node Top
@top Using gensfw

This info manual describes the use of the @command{gensfw} script generator.

@command{gensfw} displays dialogs through which a user can adjust settings
that are used to generate MySQL and SRM scripts.  Each of the fundamental
Schema interactions has a @command{gensfw} dialog for customizing that
particular interaction.

The Schema interactions that @command{gensfw} provides are:

@table @strong
@item List
for the collection of records in the table.
@item Add
for adding a record to the table.
@item Read
for viewing a record.
@item Update
for changing a record.
@item Delete
to delete a record.
@item Import
to import items into the table.
@item Export
to create a spreadsheet with the table's contents.
@end table

Note that this info guide is incomplete.  I have created this file
in order to leave documentation for ambiguous and confusing situations.
However, developing a product with this tool and with Schema Server is
a more pressing need than a complete set of documentation.

@end ifnottex


@contents
@menu
* Introduction::
* How it Works::                 Functional details to affect the utility's usage
* Selecting a Table::            Different ways to select a table
* Table Interactions Dialog::    The main working dialog from which all options are available
* Supported Interactions::       Learn about the supported interactions
@end menu

@node Introduction
@chapter Introduction

After selecting a database and table, either interactively or with command
line parameters, @command{gensfw} queries MySQL for the tables' fields to
create default 

@node How it Works
@chapter How it works

I chose to develop this tool using BASH scripting and the @acronym{YAD, Yet Another Dialog}
commandline dialog utility.  Part of my goal in this project is to
experiment and learn the strengths and limitations BASH application
programming.

That said, and despite some weaknesses listed below, the @command{gensfw}
utility can be a great labor-saving tool for generating MySQL script and
SRM files.

@itemize @bullet
@item
Automatically coordinate data types between procedures and the source
table.
@item
Create MySQL procedure code that conforms to current best practices for
Schema development.
@item
Saves settings to a @acronym{gsf, Generated Schema framework File} file
to which a user can return to modify settings or to regenerate scripts
after a change in the table definition.
@end itemize

The @command{gensfw} utility is a BASH script that uses @acronym{YAD, Yet Another Dialog} 
for the @acronym{UI, User Interface}.  Although @emph{YAD} is far more
powerful than other commandline dialog utilities, it still is an imperfect
tool for making a robust application.

@itemize @bullet
@item
Some of the dialogs clunky compromises made to enable certain choices to be made.
@item
YAD generates several error messages in the console that may distracting.
@item
YAD introduces unwelcome vertical space in paned dialogs.
@end itemize

Despite the drawbacks, @command{gensfw} is useful for creating a large number
of scripts.  
   
@node Selecting a Table
@chapter Selecting a Table

There are three ways to use a MySQL table to generate Schema scripts:

@enumerate
@item
@code{gensfw} alone will first show a list to select a database, then
another list to select a table.
@item
@code{gensfw [database name]} will start at the table list for the named
database.
@item
@code{gensfw [database name] [table name]} will begin at the table interaction
editor with default interaction settings.
@item
@code{gensfw tablename.gsf} passing the name of a @acronym{gsf, Generated Schema framework File}
file will also begin at the table interaction, having restored all the
settings from the previous save.
@end enumerate

@node Table Interactions Dialog
@chapter Table Interactions Dialog

The main dialog shows a header with the database and table names, along with
the number of fields in the selected table.  Below that is a list of 
interactions that can be selected for editing.  At the bottom is a set of
buttons that apply to the table globally.

The list of interactions shows a checkmark that signals that the associated
interaction will be included when the scripts are generated.  By default,
all interactions are included.

Select an interaction to modify by double-clicking the interaction line
or by using the arrow keys to select an interaction and pressing next to
open the highlighted interaction.

There are six buttons at the bottom of the dialog.  They are

@enumerate

@item
@code{Set SRM Globals} will set arbitrary global instructions that will
be included in the SRM file.

@item
@code{Set Labels} will open a dialog where the default labels for each
field can be set.  If set, these values will be written to the SRM file
as a sharable mode.

@item
@code{Set Links} is a dialog where session variables can be associated with
fields.  The main usage for this is to support multiple accounts, where
the session variable will be assigned or queried from the MySQL session
rather than from a GET/POST request.

@item
@code{Save Files} is a clunky dialog through which the different file types
are given names and are selected for output.  By default, the files are
named after the selected table, and all three files types are generated:

@enumerate

@item
a @emph{gsf} file

@item
an @emph{srm} file

@item
an @emph{sql} file

@end enumerate
   
@item
@code{Cancel} returns to the previous screen.  That will be the tables
screen if the interaction dialog was entered through the table list, or
simple exit if the table name or @emph{gsf} was specified on the commandline.

@item
@code{OK} will open the highlighted interaction.

@end enumerate

@node Supported Interactions
@chapter Supported Interactions

The main purpose of this dialog is to prepare settings for interactions.
The interactions are the standard @acronym{CRUD, Create@comma{} Read@comma{} Update@comma{} Delete}
interactions (we call it @emph{Add} instead of @emph{Create}).  List, Import,
and Export interactions are also provided.

@menu
* Interaction Basics::
* List Interaction::
* Add Interaction::
* Read Interaction::
* Update Interaction::
* Delete Interaction::
* Import Interaction::
* Export Interaction::
@end menu

@node Interaction Basics
@section Interaction Basics

The interaction editor page has three sections:

@menu
* Interaction Editor Head::        The top section of the editor page contains
                                   context info and interaction settings.

* Interaction Editor Field List::  This section shows field settings for the
                                   interaction.

* Interaction Editor Buttons::     Buttons to see script fragment previews and
                                   to leave the editor.
@end menu

@node Interaction Editor Head
@subsection Interaction Editor Head

Each interaction page includes two panes, the top of which includes
per interaction data elements, and the bottom pane has an editable
table with a line for each table field (omitting some index fields
for certain interaction types).

@node Interaction Editor Field List
@subsection Interaction Editor Field List

@subheading Included Fields
This section is a list of the table fields that apply to this
interaction, omitting fields that cannot be used.

An example of an omitted field is an auto-incremented key field
in an @command{Add} interaction, where the identity value is not
yet assigned.  It is omitted because there is no way to set it.

@subheading Field Default Settings
Field flags will be initially set according to interaction type.

For example, @command{Delete} and @command{Read} interactions
usually only need an identity value to indicate the target record,
so in those cases, the @strong{Param} flag will be set for the
identify field and unset for the other fields.

Likewise, the @command{Update} interaction will, by default,
have all the @strong{Result} flags set in order to include them
in the output for default values in the update dialog.

Fields that cannot be changed from default values will not be
included in the list, so if a flag is available, it can be
changed.

@subheading Field List Columns

The left-most two columns of the field list are read-only. They
are the column name and data-type.

The remaining five colums can be changed according to need.

@table @strong
@item Param
Fields with the column checked will be included in the parameter
list of the SQL procedure associated with the interaction.

@item Result
Fields with this column checked will be included in the
@command{SELECT} clause of main query in the procedure, and
this will be found in the results of the XML document.

@item Readonly
Fields with the column checked will add a @code{readOnly} instruction
for the field in the schema of the SRM file.

@item Hide
Fields with the column checked will add a @code{hidden} instruction
for the field in the schema of the SRM file.

@item Label
The contents of this text column, if set, will add a @code{label}
instruction for the field name in the schema of the SRM file.

When this value is set, it overrides the global label settings
and the field name (which is the field label of last resort).

@end table

@node Interaction Editor Buttons
@subsection Interaction Editor Buttons

Besides the buttons that exit the editor are two preview buttons.

Each shows a fragment of the file that would be created when
the @key{Save Files} button is pressed on the interaction selection
dialog.

The previews are made available to confirm the effects of different
flag settings before committing the changes.  The previews may also
be used by copying the result to the save buffer in order to copy
the contents to a custom SQL or SRM file.

@table @key
@item Show SRM
This button will show the one or more response modes that will
be generated for this interaction with the current field settings.

@item Show SQL
This button will show one or more SQL procedures that will be
generated to support the interaction according to the @strong{Param}
and @strong{Result} settings.
@end table


@node List Interaction
@section List Interaction
This chapter is incomplete for now.

@node Add Interaction
@section Add Interaction
This chapter is incomplete for now.

@node Read Interaction
@section Read Interaction
This chapter is incomplete for now.

@node Update Interaction
@section Update Interaction

The @command{Update} interaction is unique in that it requires
two MySQL procedures, one to get the current values and 
a second to save new values.

The sense of the @strong{Param} and @strong{Result} flags
is slightly changed from other interactions.  In fact, the
@strong{Param} flags indicate which fields will be used
to select the existing record and the @strong{Result} flags
are both the result columns from the procedure that returns
the old values @strong{and} the value parameters for procedure
that saves the changes.

@node Delete Interaction
@section Delete Interaction
This chapter is incomplete for now.

@node Import Interaction
@section Import Interaction

This is the most involved interaction.  The generated SQL
will create a quarantine table, granting some file privileges
for the table to the default user.  There are also three
procedures

The @strong{Param} flags indicate which fields will be included
in the quarantine table.

@enumerate
@item
A review procedure for the user to look at the quarantined data
to confirm that the columns of the uploaded data were in the
correct order.

@item
A procedure to remove the uploaded records from the quarantine
table.  This procedure is used if the user rejects the uploaded
data or when the data has been accepted and incorporated.

@item
The last generated procedure inserts the contents of the
quarantine table into the target table.
@end enumerate


@node Export Interaction
@section Export Interaction

This is a pretty simple interaction, the @strong{Result} flags
determine which fields will be included in the exported
spreadsheet.

@bye
