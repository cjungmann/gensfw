#!/usr/bin/env bash

declare DBName
declare TableName
declare Proc_Name_Root
declare Update_Proc
declare Proc_Type

declare -a Fields_to_Omit=()

declare delim_parm=$'|'

# Colorize entire line
color_echo() { echo "[1;36m${1}[0m"; }

# Echo a string, with substrings between two delimiters color-hilited
# The default hilited delimiter is an underscore (_), but if that's
# not convenient (ie it's included in the message), it can be replaced
# with a single character parameter before the string.
#
# See 'echoing' file in https://github.com/cjungmann/bash_ideas
hilite_echo()
{
    local delimiter=$'_'
    local msg="$1"

    if [ "${#msg}" -eq 1 ]; then
        delimiter="$1"
        msg="$2"
    fi

    local IFS=$'\n'
    local -a input=( $( echo "$msg" | sed -e 's|\(.\)|\1\n|g' ) )

    local -a output=()
    local -i in_hilite=0
    local cch
    for cch in "${input[@]}"; do
        if [ "$cch" == "$delimiter" ]; then
            if [ "$in_hilite" -eq 0 ]; then
                in_hilite=1
                output+=( '[1;36m' )
            else
                in_hilite=0
                output+=( '[0m' )
            fi
        else
            output+=( "$cch" )
        fi
    done

    IFS=
    echo "${output[*]}"
}

show_usage()
{
    echo
    echo "[1;32mgensfw_procs_from_table[0m <database> <table> <mode name> [options]"
    echo
    echo "This procedure needs to know the database and table and what kind"
    echo "of interaction to generate."
    echo
    echo "The first two untagged parameters will be assigned to the database and table"
    echo "names (unless already explicitely defined with a tag)."
    echo
    echo "The optional arguments change some details."
    hilite_echo "#" "Normally, the procedure will be named #App_<table_name>_<action>#"
    echo "with 'action' being replaced with Update or Add, according to the specified"
    echo "proc type (option -y).  Using -r <procedure_name> will the parameter value instead."
    echo
    echo "-u <update proc> informs the generator what procedure to call to return the new"
    echo "to the client."
    echo
    echo "Here are the parameter options:"
    echo
    hilite_echo "-d <_d_atabase name>"
    hilite_echo "-o <field name to _o_mit>    Can be used multiple times to omit fields."
    hilite_echo "-t <_t_able name>"
    hilite_echo "-y <proc t_y_pe> (add or update for now)"
    hilite_echo "-r <p_r_ocedure name>"
    hilite_echo "-u <_u_pdate proc>"
    echo
}

in_array()
{
    local needle="${1}"
    local straw
    shift
    for straw in "$@"; do
        if [ "$straw" == "$needle" ]; then
            return 0
        fi
    done

    return 1
}

process_cli_args()
{
    local arg flag
    for arg in "$@"; do
        if [ "${arg:0:1}" == "-" ]; then
            flag="${arg:1}"
            continue
        fi
        if [ -n "$flag" ]; then
            case "$flag" in
                d) DBName="$arg" ;;
                o) Fields_to_Omit+=( "$arg" ) ;;
                r) Proc_Name_Root="$arg" ;;
                t) TableName="$arg" ;;
                u) Update_Proc="$arg" ;;
                y) Proc_Type="$arg" ;;
                *) echo "Unrecognized flag '-$flag'" ;;
            esac
            flag=
        elif [ -z "$DBName" ]; then
            DBName="$arg"
        elif [ -z "$TableName" ]; then
            TableName="$arg"
        fi
    done
}

push_omit() { Fields_to_Omit+=( "$1" );  }
is_omitted() { in_array "$1" "${Fields_to_Omit[@]}"; }

confirm_database()
{
    local IFS=$'\n'
    local -a arr_query=(
        "SELECT COUNT(*)"
        "FROM SCHEMATA"
        "WHERE SCHEMA_NAME='$DBName'"
        )

    IFS=' '
    local query="${arr_query[*]}"

    local -i count=$( mysql information_schema -BN -e "${query}" )

    [ "$count" -eq 1 ]
}

confirm_table()
{
    local IFS=$'\n'
    local -a arr_query=(
        "SELECT COUNT(*)"
        "FROM TABLES"
        "WHERE TABLE_SCHEMA='$DBName'"
        "AND TABLE_NAME='$TableName'"
        )

    IFS=' '
    local query="${arr_query[*]}"

    local -i count=$( mysql information_schema -BN -e "${query}" )

    [ "$count" -eq 1 ]
}

declare -i NdxNdx=0
declare -i Ndx_Name=$((       NdxNdx++ ))
declare -i Ndx_DataType=$((   NdxNdx++ ))
declare -i Ndx_ColumnType=$(( NdxNdx++ ))
declare -i Ndx_MaxLen=$((     NdxNdx++ ))
declare -i Ndx_NumPrec=$((    NdxNdx++ ))
declare -i Ndx_NumScale=$((   NdxNdx++ ))
declare -i Ndx_Nullable=$((   NdxNdx++ ))
declare -i Ndx_AutoIncr=$((   NdxNdx++ ))
declare -i Ndx_PriKey=$((     NdxNdx++ ))

get_name() { echo "${ColRec[$Ndx_Name]}"; return 0; }
get_dtype() { echo "${ColRec[$Ndx_DataType]}"; return 0; }
get_maxlen() { echo "${ColRec[$Ndx_MaxLen]}"; return 0; }
get_numprec() { echo "${ColRec[$Ndx_NumPrec]}"; return 0; }
get_numscale() { echo "${ColRec[$Ndx_NumScale]}"; return 0; }
is_nullable() { [ "${ColRec[$Ndx_Nullable]}" == "YES" ]; }
is_autoinc() { [ "${ColRec[$Ndx_AutoIncr]}" == "YES" ]; }
is_prikey() { [ "${ColRec[$Ndx_PriKey]}" == "YES" ]; }

get_ctype()
{
    local val="${ColRec[$Ndx_ColumnType]}"
    if [[ "$val" =~ (.*int)\( ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        echo "$val"
    fi
    return 0
}

get_fields_info()
{
    local -n array_alias="$1"

    local IFS=$'\n'

    local -a arr_cols=(
        "COLUMN_NAME"
        "DATA_TYPE"
        "COLUMN_TYPE"
        "CHARACTER_MAXIMUM_LENGTH"
        "NUMERIC_PRECISION"
        "NUMERIC_SCALE"
        "CASE WHEN IS_NULLABLE='NO' THEN NULL ELSE 'YES' END NULLABLE"
        "CASE WHEN INSTR(EXTRA,'auto_increment') THEN 'YES' ELSE NULL END AS AUTO_INCREMENT"
        "CASE WHEN INSTR(COLUMN_KEY,'PRI') THEN 'YES' ELSE NULL END AS PRIMARY_KEY"
        )

    # Assemble the comma-delimited field names
    IFS=','
    local cols="${arr_cols[*]}"

    IFS=$'\n'
    local -a arr_query=(
        "SELECT"
        # Use comma-delimited field names
        "${cols}"
        "FROM COLUMNS"
        "WHERE TABLE_SCHEMA='$DBName'"
        "  AND TABLE_NAME='$TableName'"
    )

    # Assemble the query with space separators
    IFS=' '
    local query="${arr_query[*]}"

    # Revert to newline IFS so each line is an array element
    IFS=$'\n'
    # Note use of 'tr' command to convert tabs all at once:
    array_alias=( $( mysql information_schema -BN -e "$query" | tr $'\t' "$delim_parm" ) )
}

Filter_Basic()        { ! is_omitted $( get_name ); }

Filter_None()         { Filter_Basic; }
Filter_New_Params()   { Filter_Basic && ! is_prikey; }
Filter_Update_Sets()  { Filter_Basic && ! is_prikey; }
Filter_Update_Where() { Filter_Basic && is_prikey; }

get_prikey_name()
{
    local prikey_name fieldstr
    local -a ColRec
    local IFS="$delim_parm"
    for fieldstr in "${Fields_Info[@]}"; do
        ColRec=( $fieldstr )
        if is_prikey; then
            get_name
            return 0
        fi
    done
    return 1
}

make_indent_string() { printf ' %.0s' $( seq 1 "$1" ); }

add_procedure_params()
{
    local -i indent="$1"
    local indentstr=$( make_indent_string "$indent" )

    local -n filter="${2:-Filter_None}"
    local IFS
    local fieldstr name type

    # Use name "ColRec" because it's recognized by several
    # functions that extract column information
    local -a ColRec
    local -i count=0
    for fieldstr in "${Fields_Info[@]}"; do
        IFS="$delim_parm"
        ColRec=( $fieldstr )

        if "${!filter}"; then
            name=$( get_name )
            type=$( get_ctype )

            if [ $(( count++ )) -gt 0 ]; then
                echo ","
                echo -n "$indentstr"
            fi

            echo -n "$name ${type^^}"
        fi
    done

    echo ")"
}

add_insert_fields()
{
    local -i indent="$1"
    local indentstr=$( make_indent_string "$indent" )
    local fieldstr
    local -a ColRec
    local IFS="$delim_parm"
    local -i count=0

    for fieldstr in "${Fields_Info[@]}"; do
        ColRec=( $fieldstr )
        if ! is_prikey; then
            if [ $(( count++ )) -gt 0 ]; then
                echo ","
                echo -n "$indentstr"
            fi
            echo -n "$( get_name )"
        fi
    done
}


add_update_sets()
{
    local -i indent="$1"
    local indentstr=$( make_indent_string "$indent" )

    local -n filter="${2:-Filter_Update_Sets}"
    local IFS
    local fieldstr name type

    # Use name "ColRec" because it's recognized by several
    # functions that extract column information
    local -a ColRec
    local -i count=0
    for fieldstr in "${Fields_Info[@]}"; do
        IFS="$delim_parm"
        ColRec=( $fieldstr )

        if "${!filter}" ; then
            name=$( get_name )

            if [ $(( count++ )) -gt 0 ]; then
                echo ","
                echo -n "$indentstr"
            fi

            echo -n "\`$name\` = $name"
        fi
    done

    # Add newline after final set pair
    echo
}

add_update_wheres()
{
    local -n filter="${1:-Filter_Update_Where}"
    local -a ColRec
    local name fieldstr
    local -i count=0

    for fieldstr in "${Fields_Info[@]}"; do
        IFS="$delim_parm"
        ColRec=( $fieldstr )
        if "${!filter}"; then
            name=$( get_name )
            if [ $(( count++ )) -eq 0 ]; then
                echo -n "    WHERE \`$name\` = $name"
            else
                echo
                echo -n " AND \`$name\` = $name"
            fi
        fi
    done
}

make_add_procedure()
{
    local proc_name
    if [ -z "$ProcNameRoot" ]; then
        proc_name="App_${TableName}_Add"
    else
        proc_name="$ProcNameRoot_Add"
    fi

    echo "DROP PROCEDURE IF EXISTS ${proc_name} \$\$"
    local stmt_start="CREATE PROCEDURE ${proc_name}("
    echo -n "$stmt_start"

    add_procedure_params "${#stmt_start}" "Filter_New_Params"

    echo "BEGIN"

    if [ -n "$Update_Proc" ]; then
        echo "   DECLARE newid INT UNSIGNED;"
        echo "   DECLARE rcount INT UNSIGNED;"
        echo
    fi

    echo "   INSERT INTO ${TableName}"
    local paren_line="          ("

    echo -n "$paren_line"
    add_insert_fields "${#paren_line}"
    echo ")"
    paren_line="   VALUES ("
    echo -n "$paren_line"
    add_insert_fields "${#paren_line}"
    echo ");"

    if [ -n "$Update_Proc" ]; then
        echo
        echo "   SELECT ROW_COUNT() INTO rcount;"
        echo "   IF rcount > 0 THEN"
        echo "      SELECT LAST_INSERT_ID() INTO newid;"
        echo "      CALL ${Update_Proc}(newid);"
        echo "   END IF;"
    fi

    echo "END \$\$"
}

make_update_procedure()
{
    local proc_name prikey_name
    if [ -z "$ProcNameRoot" ]; then
        proc_name="App_${TableName}_Update"
    else
        proc_name="$ProcNameRoot_Update"
    fi

    echo "DROP PROCEDURE IF EXISTS ${proc_name} \$\$"
    local stmt_start="CREATE PROCEDURE ${proc_name}("
    echo -n "$stmt_start"

    add_procedure_params "${#stmt_start}"
    echo "BEGIN"

    if [ -n "$Update_Proc" ]; then
        prikey_name=$( get_prikey_name )
        echo "   DECLARE rcount INT UNSIGNED;"
        echo
    fi

    echo "   UPDATE ${TableName}"
    local set_line="      SET "
    echo -n "$set_line"
    add_update_sets "${#set_line}"
    add_update_wheres
    echo ";"

    if [ -n "$Update_Proc" -a -n "$prikey_name" ]; then
        echo
        echo "   SELECT ROW_COUNT() INTO rcount;"
        echo "   IF rcount > 0 THEN"
        echo "      CALL ${Update_Proc}($prikey_name);"
        echo "   END IF;"
    fi
        

    echo "END \$\$"
}

use_fields_info()
{
    if [ -z "$Proc_Type" ]; then
        color_echo "Missing the -y parameter."
    else
        case "$Proc_Type" in
            add)    make_add_procedure ;;
            update) make_update_procedure ;;
            *)      color_echo "'${Proc_Type} is an unrecognized -y parameter." >&2
        esac
    fi
}

process_cli_args "$@"

declare -a Fields_Info

if confirm_database; then
    if confirm_table; then
        if [ -n "$Proc_Type" ]; then
            get_fields_info "Fields_Info"
            use_fields_info
        else
            color_echo "No procedure type entered (-y argument)" >&2
            show_usage
        fi
    else
        color_echo "Table '$TableName' is not recognized in Database '$DBName'." >&2
        show_usage
    fi
else
    color_echo "Database '$DBName' is not recognized." >&2
    show_usage
fi

