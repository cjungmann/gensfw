#!/bin/bash

save_srm_to_file()
{
    local filepath="$1"

    srto()
    {
        if include_current_iact_record; then
            echo >> $filepath
            gsf_write_script_srm >> $filepath
        fi
    }

    local -a SRM_GLOBALS=(
        "\$database" "${GF_DBNAME}"
        "\$xml-stylesheet" "default.xsl"
        "\$default-mode" "list"
    )

    gsf_add_custom_srm_globals

    if gsf_IACT_included "Import"; then
        cmds=( "${SRM_GLOBALS[@]}" "\$session-type" "simple" )
    fi
    
    tabulate_array 0 "${SRM_GLOBALS[@]}"  > $filepath
    gsf_callback_iact_records "srto"
}

gsf_add_custom_srm_globals()
{
    local -i count="${#GSF_SRM_GLOBALS[@]}"
    local -i ndx=0
    local tag val

    count=$(( count/=2 ))

    while [ $ndx -lt $count ]; do
        tag="${GSF_SRM_GLOBALS[$ndx]}"
        val="${GSF_SRM_GLOBALS[($ndx+$count)]}"
        ((ndx++))
        if [ -n "$tag" -a -n "$val" ]; then
            SRM_GLOBALS=( "${SRM_GLOBALS[@]}" "$tag" "$val" )
        fi
    done
}

# tabulate_array()
# param 1: indent level
# params 2 to end: values of an array of strings
#
# After slicing off the leading integer value, the function
# scans alternate elements to get the longest left-side value.
# Then it prints out the values in tabluar form, with at least
# one level of indentation, but additional levels according to
# the indent level parameter.
tabulate_array()
{
    local -i indent_count=$1
    local -i ndx curlen maxlen=0

    # slice-off the leading indent-level integer parameter:
    local -a vals=( "${@:2}" )

    # Start printf format with indicated indentations:
    local el formatstr=""
    for (( ndx=0; ndx<indent_count; ndx++ )); do
        formatstr="${formatstr}${gsf_script_indent}"
    done

    # Get length of longest term:
    ndx=0
    for el in "${vals[@]}"; do
        if [ $(( $(( ndx++ )) % 2 )) -eq 0 ]; then
            curlen="${#el}"
            if [ $curlen -gt $maxlen ]; then
                maxlen=$curlen
            fi
        fi
    done

    # Finish format string with formatting:
    formatstr="${formatstr}%-${maxlen}s"

    # write out tabulated array values
    ndx=0
    for el in "${vals[@]}"; do
        if [ $(( $(( ndx++ )) % 2 )) -eq 0 ]; then
            printf "$formatstr" "$el"
        else
            echo " : $el"
        fi
    done

    # Add newline if loop terminates while looking for a right-hand value:
    if [ $(( ndx % 2 )) -eq 1 ]; then
        echo
    fi
}

gsf_get_delete_strings_for_edit()
{
    local DELETE_TASK_STR="?delete"
    local DELETE_CONFIRM_STR="Delete"
    local ggdsfe_callback="$1"
    local joiner=" "
    local pname
    
    ggdts_lambda()
    {
        if CB_ROW_IS_PARAM; then
            pname=$( CB_ROW_NAME )
            DELETE_TASK_STR="${DELETE_TASK_STR}&${pname}={@${pname}}"

            if ! CB_ROW_IS_INDEX; then
                DELETE_CONFIRM_STR="${DELETE_CONFIRM_STR}${joiner}'{@${pname}}'"
                if [ "${joiner:0:1}" != "," ]; then
                    joiner=",${joiner}"
                fi
            fi
        fi
    }

    gsf_callback_iact_info "Delete" "ggdts_lambda"
    DELETE_CONFIRM_STR="${DELETE_CONFIRM_STR} from table '${GF_TNAME}'?"
    $ggdsfe_callback
}

gsf_write_schema_field()
{
    local -a props
    local -i gwsf_level=$1
    local callback=$2
    local name=$( CB_ROW_NAME )
    local ctype=$( CB_ROW_TYPE )

    # label in two steps to detect exit status:
    local label
    label=$( CB_ROW_LABEL )
    if [ $? -eq 0 ]; then
        props=( "${props[@]}" label "${label}" )
    fi

    if CB_ROW_IS_READONLY; then
        props=( "${props[@]}" readOnly true )
    fi

    if CB_ROW_IS_HIDDEN; then
        props=( "${props[@]}" hidden true )
    fi

    if [[ " ENUM SET " =~ " $ctype " ]]; then
        props=( "${props[@]}" "${ctype,,?}" "${GF_TNAME}:${name}" )
    fi

    if [ "${#props[@]}" -gt 0 ]; then
        $callback
        tabulate_array $gwsf_level "field : ${name}"
        tabulate_array $(( ++gwsf_level )) "${props[@]}"
    fi
}

gsf_write_schema_delete_button()
{
    local -i level="$1"
    # Get delete information, including whether
    # or not a delete interaction is provided.
    local confirm_str task_str
    gsmU_lambda()
    {
        confirm_str="${DELETE_CONFIRM_STR}"
        task_str="${DELETE_TASK_STR}"
    }
    gsf_get_delete_strings_for_edit "gsmU_lambda"

    local -a bu_delete=(
        "type" "delete"
        "label" "Delete"
        "confirm" "${confirm_str}"
        "task" "${task_str}"
    )

    tabulate_array "$level" "button"
    tabulate_array $(( level+1 )) "${bu_delete[@]}"
}

# Prints a schema if there are any items to 
gsf_write_schema()
{
    local -i schema_level=${1: -1}
    local -i field_level=$(( schema_level+1 ))
    local ltest

    if [[ " Add Import " =~ " ${IACT_NAME} " ]]; then
        ltest=CB_ROW_IS_PARAM
    else
        ltest=CB_ROW_IS_RESULT
    fi

    # Set flag in order to print the schema head only once,
    # and only after we know we must print a schema field.
    local -i sprinted=1 # Using 1==false, the BASH convention
    gws_start_schema()
    {
        if [ $sprinted -ne 0 ]; then
            sprinted=0
            tabulate_array $schema_level "schema"
        fi
    }

    gws_schema_field()
    {
        # ltest is a function name whose exit value we check:
        if ${ltest}; then
            gsf_write_schema_field $field_level "gws_start_schema"
        fi
    }

    # For Update/(Edit) type only, when a Delete interaction is
    # defined, add a delete button to the schema.
    if [ "${IACT_NAME}" = "Update" ]; then
        if gsf_IACT_included "Delete"; then
            gws_start_schema
            gsf_write_schema_delete_button 2
        fi
    fi

    gsf_callback_prefs_rows "gws_schema_field"
}

# Entry point for printing one of the interaction types:
gsf_write_script_srm()
{
    if [ "${IACT_NAME}" = "Import" ]; then
        gsf_write_script_srm_import
    else
        # gsf_script_intro_srm

        gsf_srm_mode_${IACT_NAME}
    fi
}

# Add instructions according to the interaction meta settings.
# 0:name, 1:include, 2:pagemode
gsf_srm_append_metadata_to_cmds()
{
    local LSEP="${IFS:0:1}"
    for el in "${@}"; do
        echo -n "${el}${LSEP}"
    done

    if [ "${meta_vals[2]}" = "TRUE" ]; then
        echo "PageMode${LSEP}true${LSEP}"
    fi
}
 
gsf_srm_mode_List()
{
    local -a cmds=(
        type table
        procedure "${GF_PROC_ROOT}List"
    )

    if gsf_IACT_included "Update"; then
        cmds=( "${cmds[@]}" on_line_click ?edit )
    fi

    echo "list"
    cmds=( $( gsf_srm_append_metadata_to_cmds "${cmds[@]}" ) )
    tabulate_array 1 "${cmds[@]}"

    if gsf_IACT_included "Add"; then
        local -a a_button=(
            type add
            label "Create ${GF_TNAME}"
            task ?add
        )
        tabulate_array 1 "button"
        tabulate_array 2 "${a_button[@]}"
    fi

    if gsf_IACT_included "Import"; then
        local -a a_button=(
            type jump
            label "Import"
            url ?import_"${GF_TNAME}"
        )
        tabulate_array 1 "button"
        tabulate_array 2 "${a_button[@]}"
    fi

    if gsf_IACT_included "Export"; then
        local -a a_button=(
            type jump
            label "Export"
            url ?export
        )
        tabulate_array 1 "button"
        tabulate_array 2 "${a_button[@]}"
    fi

    gsf_write_schema 1
}

# This is a two part action, so there are two modes,
# one to present the form, the second to save it.
gsf_srm_mode_Add()
{
    local proc_name="${GF_PROC_ROOT}Add"

    local -a add_cmds=(
        type form-new
        schema-proc "${proc_name}"
        form-action "?add_submit"
    )

    submit_cmds=(
        type form-submit
        procedure "${proc_name}"
    )

    # Form response mode:
    echo "add"
    cmds=( $( gsf_srm_append_metadata_to_cmds "${cmds[@]}" ) )
    tabulate_array 1 "${add_cmds[@]}"
    gsf_write_schema 1
    echo

    # Save form response mode:
    echo "add_submit"
    tabulate_array 1 "${submit_cmds[@]}"
    tabulate_array 1 "result"
    tabulate_array 2 type update
}

gsf_srm_mode_Read()
{
    local -a cmds=(
        type form-view
        procedure "${GF_PROC_ROOT}Read"
        )

    echo "read"
    tabulate_array 1 "${cmds[@]}"
}

gsf_srm_mode_Update()
{
    local -a cmds=(
        type form-edit
        schema-proc "${GF_PROC_ROOT}Update"
        procedure "${GF_PROC_ROOT}Value"
        form-action ?edit_submit
    )

    # Write out the response mode "edit"
    echo "edit"
    cmds=( $( gsf_srm_append_metadata_to_cmds "${cmds[@]}" ) )
    tabulate_array 1 "${cmds[@]}"

    gsf_write_schema 1
    echo

    # Write out the response mode "edit_submit"
    local -a ecmds=(
        type form-submit
        procedure "${GF_PROC_ROOT}Update"
    )

    echo "edit_submit"
    tabulate_array 1 "${ecmds[@]}"
    tabulate_array 1 "result"
    tabulate_array 2 "type" "update"
}

gsf_srm_mode_Delete()
{
    local -a cmds=(
        type delete
        procedure "${GF_PROC_ROOT}Delete"
    )
    echo "delete"
    cmds=( $( gsf_srm_append_metadata_to_cmds "${cmds[@]}" ) )
    tabulate_array 1 "${cmds[@]}"
}

gsf_srm_mode_Export()
{
    local -a cmds=(
        type export
        procedure "${GF_PROC_ROOT}Export"
        filename "${GF_TNAME}.ods"
    )
    echo "export"
    tabulate_array 1 "${cmds[@]}"
}


gsf_write_script_srm_import()
{
    # Environment values for all import functions:
    local QT_NAME="QT_${GF_TNAME}"
    local ID_FIELD_NAME="id_session"
    local -i MAX_NAME_LEN="${#ID_FIELD_NAME}"
    lambda_max_name_len()
    {
        local -i len
        if CB_ROW_IS_PARAM; then
            len="${#CALLBACK_ROW[0]}"
            if [ $len -gt $MAX_NAME_LEN ]; then
                MAX_NAME_LEN=$len
            fi
        fi
    }
    # Scan for longest field name length:
    gsf_callback_prefs_rows "lambda_max_name_len"

    gsf_srm_mode_import_form
    echo
    gsf_srm_mode_import
    echo
    gsf_srm_mode_review
    echo
    gsf_srm_mode_accept
    echo
    gsf_srm_mode_abandon
    echo
}

gsf_srm_mode_import_form()
{
    local -a cmds=(
        type form-import
        form-action ?import
    )

    echo "import_${GF_TNAME}"
    tabulate_array 1 "${cmds[@]}"
}

gsf_srm_mode_import()
{
    local -a cmds=(
        type import
        target "${QT_NAME}"
        jump ?review
    )

    echo "import"
    tabulate_array 1 "${cmds[@]}"
}

gsf_srm_mode_review()
{
    local -a cmds=(
        type table
        procedure "${GF_PROC_ROOT}Import_Review"
        intro "Please review the following data, matching columns with the data they contain."
    )

    local -a b_accept=(
        type jump
        label Accept
        url ?accept
        )

    local -a b_abandon=(
        type jump
        label Abandon
        url ?abandon
        )

    echo "review"
    tabulate_array 1 "${cmds[@]}"
    gsf_write_schema 1
    echo "${gsf_script_indent}button"
    tabulate_array 2 "${b_accept[@]}"
    echo "${gsf_script_indent}button"
    tabulate_array 2 "${b_abandon[@]}"
}

gsf_srm_mode_accept()
{
    local -a cmds=(
        type import-verdict
        procedure "${GF_PROC_ROOT}Import_Accept"
        jump ?list
    )
    echo "accept"
    tabulate_array 1 "${cmds[@]}"
}

gsf_srm_mode_abandon()
{
    local -a cmds=(
        type import-verdict
        procedure "${GF_PROC_ROOT}Import_Abandon"
        jump ?list
    )
    echo "abandon"
    tabulate_array 1 "${cmds[@]}"
}
