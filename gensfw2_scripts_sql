#!/bin/bash

save_sql_to_file()
{
    local filepath="$1"

    sqto()
    {
        if include_current_iact_record; then
            gsf_write_script_sql >> $filepath
            echo >> $filepath
        fi
    }

    # Truncate and begin SQL script from scratch
    echo "USE ${GF_DBNAME};" > "$filepath"
    echo "DELIMITER \$\$" >> "$filepath"
    # Write the procedures:
    gsf_callback_iact_records "sqto"
    # Finish
    echo "DELIMITER ;" >> "$filepath"
}

gsf_write_script_sql()
{
    if [ "${IACT_NAME}" = "Import" ]; then
        gsf_write_script_sql_import
    elif [ "${IACT_NAME}" = "Update" ]; then
        gsf_write_script_sql_update
    else
        gsf_script_intro_sql

        echo "BEGIN"
        gsf_sql_proc_body_${IACT_NAME}
        echo "END  \$\$"
    fi
}

gsf_write_script_sql_import()
{
    # Environment values for all import functions:
    local QT_NAME="QT_${GF_TNAME}"
    local IMPORT_PROC_ROOT="${GF_PROC_ROOT}Import_"
    local ID_FIELD_NAME="id_session"
    local -i MAX_NAME_LEN="${#ID_FIELD_NAME}"
    lambda_max_name_len()
    {
        local -i len
        if CB_ROW_IS_PARAM; then
            local name=$( CB_ROW_NAME )
            len="${#name}"
            if [ $len -gt $MAX_NAME_LEN ]; then
                MAX_NAME_LEN=$len
            fi
        fi
    }
    # Scan for longest field name length:
    gsf_callback_prefs_rows "lambda_max_name_len"


    echo
    echo "-- -----------------------------------------------"
    echo "-- Temporarily restore default delimiter to create"
    echo "-- the table and grant privileges."
    echo "DELIMITER ;"
    echo
    gsf_sql_import_table
    echo
    echo "DELIMITER \$\$"
    echo
    gsf_sql_import_proc_review
    echo
    gsf_sql_import_proc_abandon
    echo
    gsf_sql_import_proc_accept
}

# For procedure parameters, convert ENUM and SET types
# to an appropriate length VARCHAR type.
gsf_fix_param_type()
{
    local name="$1"
    local type="$2"
    local -i maxlen=0
    local -i nprec nscale

    lambda_get_numbers()
    {
        if [ "${CURROW[$COL_NAME]}" = "$name" ]; then
            maxlen="${CURROW[$COL_MAXLEN]}"
            nprec="${CURROW[$COL_PRECISION]}"
            nscale="${CURROW[$COL_SCALE]}"
            return 1
        fi
        return 0
    }
    
    if [[ " ENUM SET " =~ " $type " ]]; then
        iterate_rows_raw "lambda_get_numbers"
        echo "VARCHAR(${maxlen})"
        return 0
    elif [[ " DECIMAL NUMERIC " =~ " $type " ]]; then
        iterate_rows_raw "lambda_get_numbers"
        echo "NUMERIC(${nprec},${nscale})"
        return 0
    fi
    echo "$type"
}

# For an import table, use the column type for
# ENUM and SET types
gsf_fix_field_type()
{
    local name=$( CB_ROW_NAME )
    local type=$( CB_ROW_TYPE )

    lambda()
    {
        if [ "${CURROW[$COL_NAME]}" = "$name" ]; then
            type="${CURROW[$COL_COLTYPE]}"
            type="${type/enum\(/ENUM\(}"
            return 1
        fi
        return 0
    }
    if [[ " ENUM SET " =~ " $type " ]]; then
        iterate_rows_raw "lambda"
    fi
    echo "$type"
}

# gsf_add_proc_params_sql()
# Adds an indented list of stored procedure parameters
# for field prefs that have the Param or Result flag set
# according to the second param
gsf_add_proc_params_sql()
{
    local indent_chars="$1"
    local -i commas=0
    local name type

    local check_func="CB_ROW_IS_PARAM"
    if [ $# -gt 1 -a "$2" = "result" ]; then
        check_func="CB_ROW_IS_RESULT"
    fi

    gsfpps_param()
    {
        if $check_func; then
            if [ $(( commas++ )) -gt 0 ]; then
                echo ","
                echo -n "${indent_chars}"
            fi
            name=$( CB_ROW_NAME )
            type=$( CB_ROW_TYPE )
            type=$( gsf_fix_param_type "${name}" "${type}" )
            echo -n "${name}" "${type}"
        fi
    }

    gsf_callback_prefs_rows "gsfpps_param"
}

# gsf_add_query_selects_sql()
# Adds field names to a select statement for fields prefs, using a
# prefix if one is set in $2.  By default, the function is guided by
# the list of result flags set, but if $3 is set to "param", it will
# add selections based on the param flags set.
gsf_add_query_selects_sql()
{
    local indent_chars="$1"
    local name prefix=""
    local -i lambda_count=0

    if [ "$#" -gt "1" -a -n "$2" ]; then
        prefix="$2."
    fi

    local check_func="CB_ROW_IS_RESULT"
    if [ $# -gt 2 -a "$3" = "param" ]; then
        check_func="CB_ROW_IS_PARAM"
    fi

    gaqss_select()
    {
        if $check_func; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo -n "${indent_chars}"
            fi
            name=$( CB_ROW_NAME )
            echo -n "${prefix}${name}"
        fi
    }

    gsf_callback_prefs_rows "gaqss_select"
}

# This writes my particular pre-procedure comment string
# that makes it easier to locate procdures
gsf_script_proc_top_comment()
{
    str="${1:3}"
    echo "-- ${str//?/-}"
}

gsf_script_sql_proc_intro()
{
    local procname="$1"
    local fields_to_list="none"
    if [ $# -gt 1 ]; then
        fields_to_list="$2"
    fi
    
    local dropstr="DROP PROCEDURE IF EXISTS ${procname} \$\$"
    local str_create_proc="CREATE PROCEDURE ${procname}("

    echo
    gsf_script_proc_top_comment "${dropstr}"
    echo "${dropstr}"
    echo -n "${str_create_proc}"

    if [ $fields_to_list != "none" ]; then
        gsf_add_proc_params_sql "${str_create_proc//?/ }" "$fields_to_list"
        echo ")"
    fi
}

gsf_script_intro_sql()
{
    gsf_script_sql_proc_intro "${GF_PROC_ROOT}${IACT_NAME}" "param"

    # local dropstr="DROP PROCEDURE IF EXISTS ${GF_PROC_ROOT}${IACT_NAME} \$\$"
    # local str_create_proc="CREATE PROCEDURE ${GF_PROC_ROOT}${IACT_NAME}("

    # echo
    # gsf_script_proc_top_comment "${dropstr}"
    # echo "${dropstr}"
    # echo -n "${str_create_proc}"

    # # parameter expansion to replace all characters with a space for
    # # aligning all the parameters with the open paren:
    # gsf_add_proc_params_sql "${str_create_proc//?/ }"
    # echo ")"
}

declare GSF_SELECT_LINE="${gsf_script_indent}SELECT "
declare   GSF_FROM_LINE="${gsf_script_indent}  FROM "
declare    GSF_SET_LINE="${gsf_script_indent}   SET "
declare  GSF_WHERE_LINE="${gsf_script_indent} WHERE "
declare    GSF_AND_LINE="${gsf_script_indent}   AND "


declare GSF_INSERT_FIELDS_LINE="${gsf_script_indent}       ("
declare GSF_INSERT_VALUES_LINE="${gsf_script_indent}VALUES ("

declare GSF_SELECT_SPACES="${GSF_SELECT_LINE//?/ }"
declare GSF_INSERT_SPACES_LINE="${GSF_INSERT_VALUES_LINE//?/ }"

gsf_sql_proc_body_List()
{
    local prefix="t"
    local -i where_count=0

    lambda()
    {
        if CB_ROW_IS_PARAM; then
            # Line-up where parts under the first part:
            if [ $(( where_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            local fname=$( CB_ROW_NAME )
            if table_field_is_index "${fname}"; then
                echo -n "(${fname} IS NULL OR ${prefix}.${fname}=${fname})"
            else
                echo -n "${prefix}.${fname}=${fname}"
            fi
        fi
    }

    # Build the query/procedure body:
    echo -n "${GSF_SELECT_LINE}"
    gsf_add_query_selects_sql "${GSF_SELECT_SPACES}" "${prefix}"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    gsf_callback_prefs_rows "lambda"
    echo ";"
}

gsf_sql_proc_body_Add()
{
    local -i lambda_count=0

    lambda_values()
    {
        if CB_ROW_IS_PARAM; then
            local fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ", "
                echo -n "${GSF_INSERT_SPACES_LINE}"
            fi
            echo -n "${fname}"
        fi
    }

    echo "${gsf_script_indent}DECLARE newid INT UNSIGNED;"
    echo
    echo "${gsf_script_indent}INSERT INTO ${GF_TNAME}"
    lambda_count=0
    echo -n "${GSF_INSERT_FIELDS_LINE}"
    gsf_callback_prefs_rows "lambda_values"
    echo ")"
    lambda_count=0
    echo -n "${GSF_INSERT_VALUES_LINE}"
    gsf_callback_prefs_rows "lambda_values"
    echo ");"
    echo
    echo "${gsf_script_indent}IF ROW_COUNT() > 0 THEN"
    echo "${gsf_script_indent}   SET newid = LAST_INSERT_ID();"
    echo "${gsf_script_indent}   CALL ${GF_PROC_ROOT}List(newid);"
    echo "${gsf_script_indent}END IF;"
}

gsf_sql_proc_body_Read()
{
    local prefix="t"
    local -i where_count=0

    lambda()
    {
        if CB_ROW_IS_PARAM; then
            # Line-up where parts under the first part:
            if [ $(( where_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            local fname=$( CB_ROW_NAME )
            echo -n "${prefix}.${fname}=${fname}"
        fi
    }

    # Build the query/procedure body:
    echo -n "${GSF_SELECT_LINE}"
    gsf_add_query_selects_sql "${GSF_SELECT_SPACES}" "${prefix}"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    gsf_callback_prefs_rows "lambda"
    echo ";"
}

gsf_sql_proc_body_Update_Read()
{
    local prefix="t"
    local -i where_count=0

    lambda()
    {
        if CB_ROW_IS_PARAM; then
            # Line-up where parts under the first part:
            if [ $(( where_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            local fname=$( CB_ROW_NAME )
            echo -n "${prefix}.${fname}=${fname}"
        fi
    }

    # Build the query/procedure body:
    echo -n "${GSF_SELECT_LINE}"
    gsf_add_query_selects_sql "${GSF_SELECT_SPACES}" "${prefix}"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    gsf_callback_prefs_rows "lambda"
    echo ";"
}

gsf_sql_update_proc_value()
{
    local fname prefix="t"
    local -i lambda_count=0

    gsupv_select()
    {
        if CB_ROW_IS_RESULT; then
            fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo -n "${GSF_SELECT_SPACES}"
            fi
            echo -n "${fname}"
        fi
    }

    gsupv_where()
    {
        if CB_ROW_IS_PARAM; then
            fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi
            echo -n "${prefix}.${fname} = ${fname}"
        fi
    }
    
    # CREATE PROCEDURE lines
    gsf_script_sql_proc_intro "${GF_PROC_ROOT}Value" "param"
    echo "BEGIN"
    echo -n "${GSF_SELECT_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "gsupv_select"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "gsupv_where"
    echo ";"

    echo "END \$\$"
}

gsf_sql_update_proc_update()
{
    local prefix="t"
    local -i lambda_count=0

    gsupu_set()
    {
        if ! CB_ROW_IS_INDEX -a CB_ROW_IS_PARAM; then
            local fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo -n "${GSF_SELECT_SPACES}"
            fi
            echo -n "${prefix}.${fname} = ${fname}"
        fi
    }

    gsupu_where()
    {
        if CB_ROW_IS_INDEX -a CB_ROW_IS_PARAM; then
            local fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi
            echo -n "${prefix}.${fname} = ${fname}"
        fi
    }

    # CREATE PROCEDURE lines
    gsf_script_sql_proc_intro "${GF_PROC_ROOT}Update" "result"
    echo "BEGIN"

    # Query to update the record:
    echo "${gsf_script_indent}UPDATE ${GF_TNAME} ${prefix}"
    echo -n "${GSF_SET_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "gsupu_set"
    echo
    echo -n "${GSF_WHERE_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "gsupu_where"
    echo ";"

    # Upon success, write updated data in List format:
    local prikey_name
    prikey_name=$( table_get_primary_key )
    if [ $? -eq 0 ]; then
        echo
        echo "${gsf_script_indent}IF ROW_COUNT() > 0 THEN"
        echo "${gsf_script_indent}   CALL ${GF_PROC_ROOT}List(${prikey_name});"
        echo "${gsf_script_indent}END IF;"
    fi

    # Terminate procedure:
    echo "END \$\$"
}

gsf_write_script_sql_update()
{
    gsf_sql_update_proc_value
    echo
    gsf_sql_update_proc_update
    echo
}

# No longer called (assuming success with gsf_write_script_sql_update!):
gsf_sql_proc_body_Update()
{
    local prefix="t"
    local -i lambda_count=0

    lambda_set()
    {
        if ! CB_ROW_IS_INDEX -a CB_ROW_IS_PARAM; then
            local fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo -n "${GSF_SELECT_SPACES}"
            fi
            echo -n "${prefix}.${fname} = ${fname}"
        fi
    }

    lambda_where()
    {
        if CB_ROW_IS_INDEX -a CB_ROW_IS_PARAM; then
            local fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi
            echo -n "${prefix}.${fname} = ${fname}"
        fi
    }

    echo "${gsf_script_indent}UPDATE ${GF_TNAME} ${prefix}"
    echo -n "${GSF_SET_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "lambda_set"
    echo
    echo -n "${GSF_WHERE_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "lambda_where"
    echo ";"

    local prikey_name
    prikey_name=$( table_get_primary_key )
    if [ $? -eq 0 ]; then
        echo
        echo "${gsf_script_indent}IF ROW_COUNT() > 0 THEN"
        echo "${gsf_script_indent}   CALL ${GF_PROC_ROOT}List(${prikey_name});"
        echo "${gsf_script_indent}END IF;"
    fi
}

gsf_sql_proc_body_Delete()
{
    local prefix="t"
    local -i lambda_count=0

    lambda_where()
    {
        if CB_ROW_IS_PARAM; then
            local fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi
            echo -n "${prefix}.${fname} = ${fname}"
        fi
    }

    echo "${gsf_script_indent}DELETE"
    echo "${gsf_script_indent}  FROM ${prefix} USING ${GF_TNAME} AS ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "lambda_where"
    echo ";"
}

gsf_sql_proc_body_Export()
{
    echo -n "${GSF_SELECT_LINE}"
    gsf_add_query_selects_sql "${GSF_SELECT_SPACES}"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME};"
}

gsf_sql_import_table()
{
    local prefix="t"
    local -i lambda_count=0

    local param_format="${gsf_script_indent}%-${MAX_NAME_LEN}s %s,\n"

    lambda_fields()
    {
        if CB_ROW_IS_PARAM; then
            local name=$( CB_ROW_NAME )
            local type=$( gsf_fix_field_type )
            printf ${param_format} "$name" "${type}"
        fi
    }

    echo "CREATE TABLE IF NOT EXISTS ${QT_NAME}"
    echo "("
    printf "${gsf_script_indent}%-${max_name_len}s INT UNSIGNED,\n" "${ID_FIELD_NAME}"
    gsf_callback_prefs_rows "lambda_fields"
    echo "${gsf_script_indent}INDEX(${ID_FIELD_NAME})"
    echo ");"
    echo
    echo "GRANT INSERT ON ${QT_NAME} TO 'webuser'@'localhost';"
    echo "GRANT FILE ON *.* to 'webuser'@'localhost';"
}

gsf_sql_import_proc_review()
{
    local proc_name="${IMPORT_PROC_ROOT}Review"

    local -i lambda_count=0
    lambda_selects()
    {
        if CB_ROW_IS_PARAM; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo  -n "${GSF_SELECT_SPACES}"
            fi
            local name=$( CB_ROW_NAME )
            echo -n "$name"
        fi
    }

    local dropstr="DROP PROCEDURE IF EXISTS ${proc_name} \$\$"
    gsf_script_proc_top_comment "${dropstr}"
    echo "$dropstr"
    echo "CREATE PROCEDURE ${proc_name}()"
    echo "BEGIN"
    echo -n "${GSF_SELECT_LINE}"
    gsf_callback_prefs_rows "lambda_selects"
    echo
    echo "${GSF_FROM_LINE}${QT_NAME}"
    echo "${GSF_WHERE_LINE}id_session = @session_confirmed_id;"
    echo "END \$\$"
}

gsf_sql_import_proc_abandon()
{
    local proc_name="${IMPORT_PROC_ROOT}Abandon"
    local dropstr="DROP PROCEDURE IF EXISTS ${proc_name} \$\$"
    gsf_script_proc_top_comment "${dropstr}"
    echo "$dropstr"
    echo "CREATE PROCEDURE ${proc_name}()"
    echo "BEGIN"
    echo "${gsf_script_indent}DELETE"
    echo "${GSF_FROM_LINE}QT_${GF_TNAME}"
    echo "${GSF_WHERE_LINE}id_session = @session_confirmed_id;"
    echo "END \$\$"
}

gsf_sql_import_proc_accept()
{
    local -i lambda_count=0
    local ispaces

    lambda_values()
    {
        if CB_ROW_IS_PARAM; then
            local fname=$( CB_ROW_NAME )
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ", "
                echo -n "${ispaces}"
            fi
            echo -n "${fname}"
        fi
    }

    local proc_name="${IMPORT_PROC_ROOT}Accept"

    local dropstr="DROP PROCEDURE IF EXISTS ${proc_name} \$\$"
    gsf_script_proc_top_comment "${dropstr}"
    echo "$dropstr"
    echo "CREATE PROCEDURE ${proc_name}()"
    echo "BEGIN"
    echo "${gsf_script_indent}INSERT INTO ${GF_TNAME}"

    lambda_count=0
    echo -n "${GSF_INSERT_FIELDS_LINE}"
    ispaces="${GSF_INSERT_SPACES_LINE}"
    gsf_callback_prefs_rows "lambda_values"
    echo ")"

    lambda_count=0
    echo -n "${GSF_SELECT_LINE}"
    ispaces="${GSF_SELECT_SPACES}"
    gsf_callback_prefs_rows "lambda_values"
    echo
    echo "${GSF_FROM_LINE}${QT_NAME}"
    echo "${GSF_WHERE_LINE}id_session = @session_confirmed_id;"
    echo
    echo "${gsf_script_indent}CALL ${IMPORT_PROC_ROOT}Abandon();"

    echo "END \$\$"
}
