#!/bin/bash

save_sql_to_file()
{
    local filepath="$1"

    sqto()
    {
        if include_current_iact_record; then
            gsf_write_script_sql ${IACT_NAME} >> $filepath
            echo >> $filepath
        fi
    }

    # Truncate and begin SQL script from scratch
    echo "USE ${GF_DBNAME};" > "$filepath"
    echo "DELIMITER \$\$" >> "$filepath"
    # Write the procedures:
    gsf_callback_iact_records "sqto"
    # Finish
    echo "DELIMITER ;" >> "$filepath"
}

gsf_sql_table_prefix()
{
    local p="${GF_TNAME:0:1}"
    echo "${p,}"
}

gsf_write_script_sql()
{
    local iact_name="$1"
    if [ "${iact_name}" = "Import" ]; then
        gsf_write_script_sql_import
    elif [ "${iact_name}" = "Update" ]; then
        gsf_write_script_sql_update
    else
        gsf_script_intro_sql

        echo "BEGIN"
        gsf_sql_proc_body_${iact_name}
        echo "END  \$\$"
    fi
}


# If a variables procedure is defined when called, this
# function will add a call to the procedure.  If the
# function is called with a parameter, the parameter
# will be used as the condition for an IF statment.
# The conditional condition was added to support the
# LIST interaction that doesn't need to variables
# information when returning an updated or added
# record.
gsf_sql_add_varsproc()
{
    local condition varsproc
    varsproc=$( gsf_get_vars_proc )
    if [ $? -eq 0 ]; then
        local indent="   "
        echo

        if [ $# -gt 0 ]; then
            echo "${indent}IF $1 THEN"
            echo -n "${indent}"
        fi
        echo "${indent}CALL ${varsproc}();"
        if [ $# -gt 0 ]; then
            echo "${indent}END IF;"
        fi

        echo
    fi
}

gsf_write_script_sql_import()
{
    # Environment values for all import functions:
    local QT_NAME="QT_${GF_TNAME}"
    local IMPORT_PROC_ROOT="${GF_PROC_ROOT}Import_"

    local BESPOKE_ID_FIELD="BESPOKE_AUTOID"
    local -i BESPOKE_AUTOINC=1
    local AUTOINC_TARGET
    local SLINK_TARGET
    local SLINK_VALUE

    local ID_FIELD_NAME="id_session"
    local -i MAX_NAME_LEN="${#ID_FIELD_NAME}"

    is_noninc_prikey() { is_prikey && ! is_forkey && ! is_autoinc; }
    table_needs_bespoke_autoinc() { [ $BESPOKE_AUTOINC -eq 0 ]; }

    maybe_update_max()
    {
        local -i len="${#1}"
        if [ $len -gt $MAX_NAME_LEN ]; then
            MAX_NAME_LEN=$len
        fi
    }

    gwsqi_survey()
    {
        local -i len
        if  is_prikey; then
            if is_forkey; then
                if is_slink; then
                    SLINK_TARGET="$FIELD_NAME"
                    SLINK_VALUE="$SLINK"
                fi
            elif  ! is_autoinc; then
                maybe_update_max "$BESPOKE_ID_FIELD"
                BESPOKE_AUTOINC=0
                AUTOINC_TARGET="$FIELD_NAME"
            fi
        fi
    }
    # Scan for longest field name length:
    gsf_callback_prefs_rows "gwsqi_survey"

    echo
    echo "-- -----------------------------------------------"
    echo "-- Temporarily restore default delimiter to create"
    echo "-- the table and grant privileges."
    echo "DELIMITER ;"
    echo
    gsf_sql_import_table
    echo
    echo "DELIMITER \$\$"
    echo
    gsf_sql_import_proc_review
    echo
    gsf_sql_import_proc_abandon
    echo
    gsf_sql_import_proc_accept
}

# For procedure parameters, convert ENUM and SET types
# to an appropriate length VARCHAR type.
gsf_fix_param_type()
{
    local name="$1"
    local type="$2"
    local -i maxlen=0
    local -i nprec nscale

    lambda_get_numbers()
    {
        if [ "${CURROW[$COL_NAME]}" = "$name" ]; then
            maxlen="${CURROW[$COL_MAXLEN]}"
            nprec="${CURROW[$COL_PRECISION]}"
            nscale="${CURROW[$COL_SCALE]}"
            return 1
        fi
        return 0
    }
    
    if [[ " ENUM SET " =~ " $type " ]]; then
        iterate_rows_raw "lambda_get_numbers"
        echo "VARCHAR(${maxlen})"
        return 0
    elif [[ " DECIMAL NUMERIC " =~ " $type " ]]; then
        iterate_rows_raw "lambda_get_numbers"
        echo "NUMERIC(${nprec},${nscale})"
        return 0
    fi
    echo "$type"
}

# For an import table, use the column type for
# ENUM and SET types
gsf_fix_field_type()
{
    local name=$( CB_ROW_NAME )
    local type=$( CB_ROW_TYPE )

    lambda()
    {
        if [ "${CURROW[$COL_NAME]}" = "$name" ]; then
            type="${CURROW[$COL_COLTYPE]}"
            type="${type/enum\(/ENUM\(}"
            return 1
        fi
        return 0
    }
    if [[ " ENUM SET " =~ " $type " ]]; then
        iterate_rows_raw "lambda"
    fi
    echo "$type"
}

# gsf_add_proc_params_sql()
# Adds an indented list of stored procedure parameters
# for field prefs that have the Param or Result flag set
# according to the second param
gsf_add_proc_params_sql()
{
    local indent_chars="$1"
    local -i commas=0
    local type

    local check_func="CB_ROW_IS_PARAM"
    if [ $# -gt 1 -a "$2" = "result" ]; then
        check_func="CB_ROW_IS_RESULT"
    fi

    if [ $PARAMS_TYPE = "Update" ]; then
        echo "Processing an Update type!" >&2
    fi

    gsfpps_param()
    {
        if ! is_slink && $check_func; then
            if [ $(( commas++ )) -gt 0 ]; then
                echo ","
                echo -n "${indent_chars}"
            fi
            type=$( CB_ROW_TYPE )
            type=$( gsf_fix_param_type "$FIELD_NAME" "${type}" )
            echo -n "$FIELD_NAME" "${type}"
        fi
    }

    gsfpps_confirm_param()
    {
        if ! is_prikey && CB_ROW_IS_PARAM; then
            if [ $(( commas++ )) -gt 0 ]; then
                echo ","
                echo -n "${indent_chars}"
            fi
            type=$( CB_ROW_TYPE )
            type=$( gsf_fix_param_type "$FIELD_NAME" "${type}" )
            echo -n "c_$FIELD_NAME" "${type}"
        fi
    }

    gsf_callback_prefs_rows "gsfpps_param"

    if [ $PARAMS_TYPE = "Update" ]; then
        gsf_callback_prefs_rows "gsfpps_confirm_param"
    fi
}

# gsf_add_query_selects_sql()
# Adds field names to a select statement for fields prefs, using a
# prefix if one is set in $2.  By default, the function is guided by
# the list of result flags set, but if $3 is set to "param", it will
# add selections based on the param flags set.
gsf_add_query_selects_sql()
{
    local indent_chars="$1"
    local prefix=""
    local -i lambda_count=0

    if [ "$#" -gt "1" -a -n "$2" ]; then
        prefix="$2."
    fi

    local check_func="CB_ROW_IS_RESULT"
    if [ $# -gt 2 -a "$3" = "param" ]; then
        check_func="CB_ROW_IS_PARAM"
    fi

    gaqss_select()
    {
        # Never select a session-variable linked field:
        if ! is_slink && $check_func; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo -n "${indent_chars}"
            fi
            echo -n "${prefix}${FIELD_NAME}"
        fi
    }

    gsf_callback_prefs_rows "gaqss_select"
}

# This writes my particular pre-procedure comment string
# that makes it easier to locate procdures
gsf_script_proc_top_comment()
{
    str="${1:3}"
    echo "-- ${str//?/-}"
}

gsf_script_sql_proc_intro()
{
    local PARAMS_TYPE="$1"
    local procname="${GF_PROC_ROOT}$1"
    local fields_to_list="none"
    if [ $# -gt 1 ]; then
        fields_to_list="$2"
    fi
    
    local dropstr="DROP PROCEDURE IF EXISTS ${procname} \$\$"
    local str_create_proc="CREATE PROCEDURE ${procname}("

    echo
    gsf_script_proc_top_comment "${dropstr}"
    echo "${dropstr}"
    echo -n "${str_create_proc}"

    if [ $fields_to_list != "none" ]; then
        gsf_add_proc_params_sql "${str_create_proc//?/ }" "$fields_to_list"
        echo ")"
    fi
}

gsf_script_intro_sql()
{
    gsf_script_sql_proc_intro "${iact_name}" "param"

    # local dropstr="DROP PROCEDURE IF EXISTS ${GF_PROC_ROOT}${IACT_NAME} \$\$"
    # local str_create_proc="CREATE PROCEDURE ${GF_PROC_ROOT}${IACT_NAME}("

    # echo
    # gsf_script_proc_top_comment "${dropstr}"
    # echo "${dropstr}"
    # echo -n "${str_create_proc}"

    # # parameter expansion to replace all characters with a space for
    # # aligning all the parameters with the open paren:
    # gsf_add_proc_params_sql "${str_create_proc//?/ }"
    # echo ")"
}

declare GSF_SELECT_LINE="${gsf_script_indent}SELECT "
declare   GSF_FROM_LINE="${gsf_script_indent}  FROM "
declare    GSF_SET_LINE="${gsf_script_indent}   SET "
declare  GSF_WHERE_LINE="${gsf_script_indent} WHERE "
declare    GSF_AND_LINE="${gsf_script_indent}   AND "


declare GSF_INSERT_FIELDS_LINE="${gsf_script_indent}       ("
declare GSF_INSERT_VALUES_LINE="${gsf_script_indent}VALUES ("

declare GSF_SELECT_SPACES="${GSF_SELECT_LINE//?/ }"
declare GSF_INSERT_SPACES_LINE="${GSF_INSERT_VALUES_LINE//?/ }"

gsf_sql_proc_body_List()
{
    local -i where_count=0 if_count=0
    local prefix=$( gsf_sql_table_prefix )

    gspbl_if()
    {
        if CB_ROW_IS_PARAM && ! is_forkey; then
            if [ $(( if_count++ )) -gt 0 ]; then
                echo -n " AND "
            fi
            echo -n "$FIELD_NAME IS NULL"
        fi
    }

    gspbl_where()
    {
        if is_slink || CB_ROW_IS_PARAM; then
            echo
            # Line-up where parts under the first part:
            if [ $(( where_count++ )) -eq 0 ]; then
                echo -n "${GSF_WHERE_LINE}"
            else
                echo -n "${GSF_AND_LINE}"
            fi

            if is_slink; then
                echo -n "${prefix}.${FIELD_NAME} = $SLINK"
            elif is_prikey && ! is_forkey; then
                echo -n "($FIELD_NAME IS NULL OR ${prefix}.${FIELD_NAME} = $FIELD_NAME)"
            else
                echo -n "${prefix}.${FIELD_NAME} = $FIELD_NAME"
            fi
        fi
    }

    # Build the query/procedure body:
    echo -n "${GSF_SELECT_LINE}"
    gsf_add_query_selects_sql "${GSF_SELECT_SPACES}" "${prefix}"
    echo
    echo -n "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    
    gsf_callback_prefs_rows "gspbl_where"
    echo ";"

    local varproc_condition=$( gsf_callback_prefs_rows "gspbl_if" )
    gsf_sql_add_varsproc "${varproc_condition}"
}

gsf_sql_proc_body_Add()
{
    local -i lambda_count=0

    local foreign_key foreign_slink
    local autoinc_key

    local varsproc=$( gsf_get_vars_proc )

    echo_field()
    {
        echo -n "gspbA_scan_key slink='$slink' "
        if is_prikey; then echo -n "YES PRIKEY "; else echo -n "NOT prikey "; fi
        if is_autoinc; then echo -n "YES AUTOIN "; else echo -n "NOT autoin "; fi
        if is_forkey; then echo -n "YES FORKEY "; else echo -n "NOT forkey "; fi
        echo
    }

    # Avoid copying this code in four places:
    maybe_add_comma_line()
    {
        if [ $(( lambda_count++ )) -gt 0 ]; then
            echo ", "
            echo -n "${GSF_INSERT_SPACES_LINE}"
        fi
    }

    gspbA_scan_keys()
    {
        if is_prikey; then
            if is_forkey; then
                foreign_key="$FIELD_NAME"
                if is_slink; then
                    foreign_slink="$SLINK"
                fi
            elif ! is_autoinc; then
                autoinc_key="$FIELD_NAME"
            fi
        fi
    }

    gspbA_fields()
    {
        if is_slink || CB_ROW_IS_PARAM; then
            maybe_add_comma_line
            echo -n "$FIELD_NAME"
        elif [ "$autoinc_key" = "$FIELD_NAME" ]; then
            maybe_add_comma_line
            echo -n "$FIELD_NAME"
        fi
    }

    gspbA_values()
    {
        if is_slink || CB_ROW_IS_PARAM; then
            maybe_add_comma_line
            if is_slink; then
                echo -n "${SLINK}"
            else
                echo -n "$FIELD_NAME"
            fi
        elif [ "$autoinc_key" = "$FIELD_NAME" ]; then
            maybe_add_comma_line
            echo -n "newid"
        fi
    }

    gsf_callback_prefs_rows "gspbA_scan_keys"

    indent_line "DECLARE newid INT UNSIGNED;"
    indent_line "DECLARE rcount INT UNSIGNED;"
    echo

    if [ $autoinc_key ]; then
        indent_line "-- DIY autoinc section"
        indent_line "-- Start multi-statement transaction:"
        indent_line "START TRANSACTION;"
        echo
        indent_line "SELECT COALESCE(MAX(ai.${autoinc_key}),0)+1 INTO newid"
        indent_line "  FROM ${GF_TNAME} ai"
        if [ $foreign_key ]; then
            if [ $foreign_slink ]; then
                indent_line " WHERE ai.${foreign_key} = ${foreign_slink};"
            else
                indent_line " WHERE ai.${foreign_key} = ${foreign_key};"
            fi
        fi
        indent_line "-- DIY autoinc section END"
        echo
    fi

    indent_line "INSERT INTO ${GF_TNAME}"
    lambda_count=0
    echo -n "${GSF_INSERT_FIELDS_LINE}"
    gsf_callback_prefs_rows "gspbA_fields"
    echo ")"
    lambda_count=0
    echo -n "${GSF_INSERT_VALUES_LINE}"
    gsf_callback_prefs_rows "gspbA_values"
    echo ");"
    echo
    indent_line "SELECT ROW_COUNT() INTO rcount;"

    indent_line "IF rcount > 0 THEN"

    if [ "$autoinc_key" -a -n "$foreign_key" ]; then
        indent_line "   -- DIY autoinc"
        indent_line "   COMMIT;"
    fi
    # We don't need LAST_INSERT_KEY() if we assigned newid with record lock
    if [ -z $autoinc_key ]; then
        indent_line "   SET newid = LAST_INSERT_ID();"
    fi

    indent_line "   CALL ${GF_PROC_ROOT}List(newid);"
    if [ $varsproc ]; then
        indent_line "   CALL ${varsproc}();"
    fi

    if [ "$autoinc_key" -a -n "$foreign_key" ]; then
        indent_line "ELSE"
        indent_line "   -- DIY autoinc"
        indent_line "   ROLLBACK;"
    fi
    
    indent_line "END IF;"
}

gsf_sql_proc_body_Read()
{
    local prefix=$( gsf_sql_table_prefix )
    local -i where_count=0

    gspbr_where()
    {
        if is_slink || CB_ROW_IS_PARAM; then
            # Line-up where parts under the first part:
            if [ $(( where_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            if is_slink; then
                echo -n "${prefix}.${FIELD_NAME} = $SLINK"
            elif is_prikey && ! is_forkey; then
                echo -n "($FIELD_NAME IS NULL OR ${prefix}.${FIELD_NAME} = $FIELD_NAME)"
            else
                echo -n "${prefix}.${FIELD_NAME} = "
                if is_slink; then
                    echo -n "$SLINK"
                else
                    echo -n "$FIELD_NAME"
                fi
            fi
        fi
    }

    # Build the query/procedure body:
    echo -n "${GSF_SELECT_LINE}"
    gsf_add_query_selects_sql "${GSF_SELECT_SPACES}" "${prefix}"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    gsf_callback_prefs_rows "gspbr_where"
    echo ";"

    gsf_sql_add_varsproc
}

gsf_sql_update_proc_value()
{
    local prefix=$( gsf_sql_table_prefix )
    local -i lambda_count=0

    gsupv_select()
    {
        if ! is_slink && CB_ROW_IS_RESULT; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo -n "${GSF_SELECT_SPACES}"
            fi
            echo -n "${prefix}.$FIELD_NAME"
        fi
    }

    gsupv_where()
    {
        if is_slink || CB_ROW_IS_PARAM; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            echo -n "${prefix}.${FIELD_NAME} = "

            if is_slink; then
                echo -n "$SLINK"
            else
                echo -n "$FIELD_NAME"
            fi
        fi
    }
    
    # CREATE PROCEDURE lines
    gsf_script_sql_proc_intro "Value" "param"
    echo "BEGIN"
    echo -n "${GSF_SELECT_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "gsupv_select"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "gsupv_where"
    echo ";"

    gsf_sql_add_varsproc
    
    echo "END \$\$"
}

gsf_sql_update_proc_update()
{
    local prefix=$( gsf_sql_table_prefix )
    local -i lambda_count=0

    gsupu_set()
    {
        if ! is_slink && ! is_prikey && CB_ROW_IS_RESULT; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo -n "${GSF_SELECT_SPACES}"
            fi
            echo -n "${prefix}.${FIELD_NAME} = $FIELD_NAME"
        fi
    }

    gsupu_where()
    {
        if is_slink || ( is_prikey && CB_ROW_IS_PARAM ); then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            echo -n "${prefix}.${FIELD_NAME} = "

            if is_slink; then
                echo -n "$SLINK"
            else
                echo -n "$FIELD_NAME"
            fi
        fi
    }

    gsupu_confirm_where()
    {
        if CB_ROW_IS_PARAM && ! is_slink && ! is_prikey; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            echo -n "${prefix}.${FIELD_NAME} = c_${FIELD_NAME}"
        fi
    }

    # CREATE PROCEDURE lines
    gsf_script_sql_proc_intro "Update" "result"
    echo "BEGIN"

    # Query to update the record:
    indent_line "UPDATE ${GF_TNAME} ${prefix}"
    echo -n "${GSF_SET_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "gsupu_set"
    echo
    echo -n "${GSF_WHERE_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "gsupu_where"
    gsf_callback_prefs_rows "gsupu_confirm_where"
    echo ";"

    # Upon success, write updated data in List format:
    local index_key_name
    index_key_name=$( table_get_index_key )
    if [ $? -eq 0 ]; then
        echo
        indent_line "IF ROW_COUNT() > 0 THEN"
        indent_line "   CALL ${GF_PROC_ROOT}List(${index_key_name});"
        indent_line "END IF;"
    fi

    # Terminate procedure:
    echo "END \$\$"
}

gsf_write_script_sql_update()
{
    gsf_sql_update_proc_value
    echo
    gsf_sql_update_proc_update
    echo
}

gsf_sql_proc_body_Delete()
{
    local prefix=$( gsf_sql_table_prefix )
    local -i lambda_count=0

    lambda_where()
    {
        if is_slink || CB_ROW_IS_PARAM; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo
                echo -n "${GSF_AND_LINE}"
            fi
            echo -n "${prefix}.${FIELD_NAME} = "
            if is_slink; then
                echo -n "$SLINK"
            else
                echo -n "$FIELD_NAME"
            fi
        fi
    }

    indent_line "DELETE"
    indent_line "  FROM ${prefix} USING ${GF_TNAME} AS ${prefix}"
    echo -n "${GSF_WHERE_LINE}"
    lambda_count=0
    gsf_callback_prefs_rows "lambda_where"
    echo ";"
    echo
    indent_line "SELECT ROW_COUNT() AS deleted;"
    
}

gsf_sql_proc_body_Export()
{
    local prefix=$( gsf_sql_table_prefix )
    local -i lambda_count=0

    gspbe_where()
    {

        if is_slink || CB_ROW_IS_PARAM; then
            
            if [ $(( lambda_count++ )) -eq 0 ]; then
                echo -n "${GSF_WHERE_LINE}"
            else
                echo
                echo -n "${GSF_AND_LINE}"
            fi

            echo -n "${prefix}.${FIELD_NAME} = "

            if is_slink; then
                echo -n "${SLINK}"
            else
                echo -n "${FIELD_NAME}"
            fi
        fi
    }

    echo -n "${GSF_SELECT_LINE}"
    gsf_add_query_selects_sql "${GSF_SELECT_SPACES}" "${prefix}"
    echo
    echo "${GSF_FROM_LINE}${GF_TNAME} ${prefix}"
    lambda_count=0
    gsf_callback_prefs_rows "gspbe_where"
    echo ";"
}

gsf_sql_import_table()
{
    local prefix=$( gsf_sql_table_prefix )
    local -i lambda_count=0

    local param_format="${gsf_script_indent}%-${MAX_NAME_LEN}s %s,\n"

    gsit_fields()
    {
        if CB_ROW_IS_PARAM && ! is_noninc_prikey && ! is_slink; then
            local type=$( gsf_fix_field_type )
            printf ${param_format} "$FIELD_NAME" "${type}"
        fi
    }

    echo "CREATE TABLE IF NOT EXISTS ${QT_NAME}"
    echo "("
    printf "${param_format}" "$ID_FIELD_NAME" "INT UNSIGNED"
    gsf_callback_prefs_rows "gsit_fields"

    if table_needs_bespoke_autoinc; then
        printf ${param_format} "$BESPOKE_ID_FIELD" "INT UNSIGNED DEFAULT 0"
    fi

    echo "${gsf_script_indent}INDEX(${ID_FIELD_NAME})"
    echo ");"
    echo
    echo "GRANT INSERT ON ${QT_NAME} TO 'webuser'@'localhost';"
    echo "GRANT FILE ON *.* to 'webuser'@'localhost';"
}

gsf_sql_import_proc_review()
{
    local proc_name="${IMPORT_PROC_ROOT}Review"

    local -i lambda_count=0
    gsipr_select()
    {
        if ( ! is_prikey ) && ! is_slink && CB_ROW_IS_PARAM; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ","
                echo  -n "${GSF_SELECT_SPACES}"
            fi
            echo -n "$FIELD_NAME"
        fi
    }

    local dropstr="DROP PROCEDURE IF EXISTS ${proc_name} \$\$"
    gsf_script_proc_top_comment "${dropstr}"
    echo "$dropstr"
    echo "CREATE PROCEDURE ${proc_name}()"
    echo "BEGIN"
    echo -n "${GSF_SELECT_LINE}"
    gsf_callback_prefs_rows "gsipr_select"
    echo
    echo "${GSF_FROM_LINE}${QT_NAME}"
    echo "${GSF_WHERE_LINE}id_session = @session_confirmed_id;"
    echo "END \$\$"
}

gsf_sql_import_proc_abandon()
{
    local proc_name="${IMPORT_PROC_ROOT}Abandon"
    local dropstr="DROP PROCEDURE IF EXISTS ${proc_name} \$\$"
    gsf_script_proc_top_comment "${dropstr}"
    echo "$dropstr"
    echo "CREATE PROCEDURE ${proc_name}()"
    echo "BEGIN"
    echo "${gsf_script_indent}DELETE"
    echo "${GSF_FROM_LINE}QT_${GF_TNAME}"
    echo "${GSF_WHERE_LINE}id_session = @session_confirmed_id;"
    echo "END \$\$"
}

gsf_sql_import_proc_accept()
{
    local acounter="@${GF_TNAME}_acount"
    
    local -i lambda_count=0
    local ispaces
    local -i bespoke_autoinc=1  # 'false' until need is detected
    local table_where

    maybe_new_line()
    {
        if [ $(( lambda_count++ )) -gt 0 ]; then
            echo ", "
            echo -n "${ispaces}"
        fi
    }

    gsiqa_set()
    {
        if CB_ROW_IS_PARAM; then
            maybe_new_line
            echo -n "$FIELD_NAME"
        fi
    }

    gsiqa_select()
    {
        if CB_ROW_IS_PARAM; then
            if [ $(( lambda_count++ )) -gt 0 ]; then
                echo ", "
                echo -n "${ispaces}"
            fi

            if is_slink; then
                echo -n "$SLINK"
            else
                echo -n "$FIELD_NAME"
            fi
        fi
    }

    local proc_name="${IMPORT_PROC_ROOT}Accept"

    local dropstr="DROP PROCEDURE IF EXISTS ${proc_name} \$\$"
    gsf_script_proc_top_comment "${dropstr}"
    echo "$dropstr"
    echo "CREATE PROCEDURE ${proc_name}()"
    echo "BEGIN"

    if table_needs_bespoke_autoinc; then
        lambda_count=0

        if [ $SLINK_VALUE ]; then
            table_where=" WHERE $SLINK_TARGET = $SLINK_VALUE"
        else
            table_where=" WHERE 1=1"    
        fi

        indent_line "-- Before table lock, setup rows to add to current MAX value."
        indent_line "DECLARE start_max INT UNSIGNED;"
        indent_line "DECLARE new_max INT UNSIGNED;"
        indent_line "SET ${acounter}=0;"
        echo
        indent_line "-- Set starting values before setting intention locks:"
        indent_line "UPDATE $QT_NAME"
        indent_line "   SET $BESPOKE_ID_FIELD = (SELECT ${acounter} := ${acounter} + 1)"
        indent_line " WHERE id_session = @session_confirmed_id;"
        echo
        indent_line "-- Start multi-statement transaction:"
        indent_line "START TRANSACTION;"
        echo
        indent_line "-- Need starting and ending values for new records:"
        indent_line "SELECT COALESCE(MAX(${AUTOINC_TARGET}),0) INTO start_max"
        indent_line "  FROM $GF_TNAME"
        indent_line "${table_where};"
        echo
        indent_line "SET new_max = start_max + ${acounter} + 1;"
        echo
        indent_line "-- Set the insert intention locks:"
        indent_line "SELECT *"
        indent_line "  FROM $GF_TNAME"
        indent_line "${table_where} AND ${AUTOINC_TARGET}<new_max;"
        echo
    fi

    echo "${gsf_script_indent}INSERT INTO ${GF_TNAME}"

    lambda_count=0
    echo -n "${GSF_INSERT_FIELDS_LINE}"
    ispaces="${GSF_INSERT_SPACES_LINE}"
    gsf_callback_prefs_rows "gsiqa_set"
    if table_needs_bespoke_autoinc; then
        echo ","
        echo "${ispaces}${AUTOINC_TARGET}"
    fi
    indent_line ")"

    lambda_count=0
    echo -n "${GSF_SELECT_LINE}"
    ispaces="${GSF_SELECT_SPACES}"
    gsf_callback_prefs_rows "gsiqa_select"
    if table_needs_bespoke_autoinc; then
        echo ","
        echo "${ispaces}new_max+$BESPOKE_ID_FIELD"
    fi
    echo "${GSF_FROM_LINE}${QT_NAME}"
    echo "${GSF_WHERE_LINE}id_session = @session_confirmed_id;"
    echo

    if table_needs_bespoke_autoinc; then
        indent_line "COMMIT;"
        indent_line "SET $acounter = NULL;"
        echo
    fi


    echo "${gsf_script_indent}CALL ${IMPORT_PROC_ROOT}Abandon();"

    echo "END \$\$"
}
