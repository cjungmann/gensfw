#!/bin/bash

show_usage()
{
    echo >&2
    echo "Usage: " >&2
    echo "$ gensfw_isotable_procs <database name> <table name>" >&2
    echo >&2
}

MISSING_DATABASE()
{
    local -i result
    local query=(
        "SELECT COUNT(*)"
        "FROM information_schema.SCHEMATA"
        "WHERE SCHEMA_NAME='${dbase_name}'")

    result=$(mysql -BN -e "${query[*]}" )

    [ $result -eq 0 ]
}

MISSING_TABLE()
{
    local -i result
    local query=(
        "SELECT COUNT(*)"
        "FROM information_schema.TABLES"
        "WHERE TABLE_SCHEMA='${dbase_name}'"
        "AND TABLE_NAME='${table_name}'" )

    result=$(mysql -BN -e "${query[*]}" )

    [ $result -eq 0 ]
}

show_database_tables()
{
    local -a table_names
    local query=(
        "SELECT TABLE_NAME"
        "FROM information_schema.TABLES"
        "WHERE TABLE_SCHEMA='${dbase_name}'")

    table_names=( $(mysql -BN -e "${query[*]}" ) )
    echo "The tables of database '${dbase_name}' are:" >&2
    printf "'%s'\n" "${table_names[@]}" >&2
}

# Search for the first argument (the needle) in the
# remaining arguments (the haystack).
#
# Returns 0-based position of the needle in the haystack,
# returns -1 if not found.
#
# Additionally, exit value is 0 (true) if needle found,
# 1 (false) if not found, to operate as a simple existence
# test.
position_in_array()
{
    local needle="${1}"
    local -a haystack=( "${@:2}" )
    local -i ndx=0
    local sample
    for sample in "${haystack[@]}"; do
        if [ "$sample" == "$needle" ]; then
            echo $ndx
            return 0
        fi
        (( ++ndx ))
    done

    echo -1
    return 1
}


# Parameter confirmation, assignment, validation:
# Confirm parameter count
if [ $# -lt 2 ]; then
    show_usage
    exit 1
fi

# Assign parameters to named variables:
declare dbase_name="${1}"
declare table_name="${2}"
declare fields_guidance="${@:3}"

# dbase_name="${1:-SFW_Households}"
# table_name="${2:-Person}"

# Validate database and table name parameters:
if MISSING_DATABASE; then
    echo "'${dbase_name}' is not a database on this server." >&2
    show_usage
    exit 1
elif MISSING_TABLE; then
    echo "'${table_name}' is not a table in the '${dbase_name}' database." >&2
    show_database_tables
    show_usage
    exit 1
fi

column_names_inventory()
{
    local -a COLUMNS_QUERY=(
        "SELECT COLUMN_NAME"
        "FROM information_schema.COLUMNS"
        "WHERE TABLE_SCHEMA='${dbase_name}'"
        "AND TABLE_NAME='${table_name}'"
    )

    mysql -BN -e "${COLUMNS_QUERY[*]}"
}

columns_info_xml()
{
    local -a TABLE_QUERY=(
        "SELECT"
        "COLUMN_NAME, DATA_TYPE, COLUMN_KEY, COLUMN_TYPE"
        "FROM information_schema.COLUMNS"
        "WHERE TABLE_SCHEMA='${dbase_name}'"
        "AND TABLE_NAME='${table_name}'"
    )

    local cname
    local newline
    local -i count=0
    for cname in "${@}"; do
        if [ $count -eq 0 ]; then
            count=1
            TABLE_QUERY=( "${TABLE_QUERY[@]}" "AND (" )
        else
            TABLE_QUERY=( "${TABLE_QUERY[@]}" "OR" )
        fi
        TABLE_QUERY=( "${TABLE_QUERY[@]}" "COLUMN_NAME='${cname}'" )
    done

    if [ $count -gt 0 ]; then
        TABLE_QUERY=( "${TABLE_QUERY[@]}" ")" )
    fi

    mysql -X "${dbase_name}" -e "${TABLE_QUERY[*]}"
}

reconcile_columns()
{
    local -a cnames=( $( column_names_inventory ) )
    local -a return_fields

    if [ "${#fields_guidance[@]}" -eq 0 ]; then
        return_fields=( "${cnames[@]}" )
    else
        local -i add_to_empty=0
        local -i ndx_to_remove
        local guidance sign col

        for guidance in "${fields_guidance[@]}"; do
            if [[ "$guidance" =~ ([+-]?)(.*) ]]; then
                if [ -z $sign ]; then
                    sign="${BASH_REMATCH[1]:-+}"

                    if [ $sign = '+' ]; then
                        add_to_empty=1
                    else
                        return_fields=( "${cnames[@]}" )
                    fi
                fi

                col="${BASH_REMATCH[2]}"

                if [ $add_to_empty -eq 1 ]; then
                    return_fields=( "${return_fields[@]}" "$col" )
                else
                    if ndx_to_remove=$( position_in_array "${col}" "${return_fields[@]}" ); then
                        unset "return_fields[${ndx_to_remove}]"
                        return_fields=( "${return_fields[@]}" )
                    fi
                fi
            fi
        done

        echo "${return_fields[@]}"
    fi
}

get_source_path()
{
    # Must include both the colon AND the space to trim
    # the spaces from the path in the array:
    local IFS=": "
    local -a arr=( $( whereis gensfw_session_procs ) )
    zpath=$( readlink "${arr[1]}" )
    zpath="${zpath%%gensfw_session_procs}"
}

get_source_path
xslpath="${zpath}gensfw_isotable_procs.xsl"

# Begin processing
declare -a FLIST=( $( reconcile_columns ) )
declare COLS_XML=$( columns_info_xml "${FLIST[@]}" )

declare -a xslargs=(
    --stringparam prefix "App_${table_name}_isoTable_"
    --stringparam table_name "Buffer_Table_${table_name}"
    "${xslpath}"
    )

declare procs
procs=$( echo "${COLS_XML}" | xsltproc "${xslargs[@]}" - )

echo "${procs}"

